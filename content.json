{"meta":{"title":"海露的个人博客","subtitle":"","description":"","author":"海露","url":"https://www.xshell.cn"},"pages":[{"title":"404 Not Found","date":"2019-11-19T11:48:50.931Z","updated":"2019-09-09T06:31:42.000Z","comments":true,"path":"404.html","permalink":"https://www.xshell.cn/404.html","excerpt":"","text":"404 Not Found 很抱歉，您访问的页面不存在可能是输入地址有误或该地址已被删除"},{"title":"我的朋友们","date":"2019-11-19T11:48:50.967Z","updated":"2019-09-09T06:31:42.000Z","comments":true,"path":"friends/index.html","permalink":"https://www.xshell.cn/friends/index.html","excerpt":"","text":"各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～ 名称： xaoxuu’s blog头像： https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg网址： https://xaoxuu.com/blog/标签： iOS"},{"title":"关于","date":"2019-11-22T01:56:12.975Z","updated":"2019-11-22T01:56:12.975Z","comments":true,"path":"about/index.html","permalink":"https://www.xshell.cn/about/index.html","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这是我的第二版，以前是www.huangdi.me，请随意留言。"},{"title":"","date":"2019-11-19T11:48:50.969Z","updated":"2019-09-09T06:31:42.000Z","comments":true,"path":"projects/index.html","permalink":"https://www.xshell.cn/projects/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2019-11-19T11:48:50.963Z","updated":"2019-09-09T06:31:42.000Z","comments":true,"path":"blog/categories/index.html","permalink":"https://www.xshell.cn/blog/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-11-19T11:48:50.965Z","updated":"2019-09-09T06:31:42.000Z","comments":true,"path":"blog/tags/index.html","permalink":"https://www.xshell.cn/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"安装nginx，keeplived，实现双机热备","slug":"安装nginx，keeplived，实现双机热备","date":"2019-11-22T03:09:04.000Z","updated":"2019-11-22T03:11:44.120Z","comments":true,"path":"安装nginx，keeplived，实现双机热备/","link":"","permalink":"https://www.xshell.cn/安装nginx，keeplived，实现双机热备/","excerpt":"安装nginx1yum install nginx","text":"安装nginx1yum install nginx 会显示一大堆信息：Is this ok [y/N]: 输入y，屏幕滚了一会之后就安装完毕，最后提示“Complete!”就是安完了。输入命令1whereis nginx nginx: /usr/sbin/nginx /etc/nginx /usr/share/nginx 配置所在目录：/etc/nginx/ PID目录：/var/run/nginx.pid 错误日志：/var/log/nginx/error.log 访问日志：/var/log/nginx/access.log 默认站点目录：/usr/share/nginx/html常用命令 启动nginx：nginx 重启nginx：killall -HUP nginx 测试nginx配置：nginx -t 安装keepalived1yum install -y keepalived 修改配置文件1vi /etc/keepalived/keepalived.conf 12345678910111213141516171819202122232425262728293031323334! Configuration File for keepalivedglobal_defs &#123; ## keepalived 自带的邮件提醒需要开启 sendmail 服务。 建议用独立的监控或第三方 SMTP router_id hailoupc ## 标识本节点的字条串，通常为 hostname&#125; ## keepalived 会定时执行脚本并对脚本执行的结果进行分析，动态调整 vrrp_instance 的优先级。如果脚本执行结果为 0，并且 weight 配置的值大于 0，则优先级相应的增加。如果脚本执行结果非 0，并且 weight配置的值小于 0，则优先级相应的减少。其他情况，维持原本配置的优先级，即配置文件中 priority 对应的值。vrrp_script chk_nginx &#123; script &quot;/etc/keepalived/nginx_check.sh&quot; ## 检测 nginx 状态的脚本路径 interval 2 ## 检测时间间隔 weight -20 ## 如果条件成立，权重-20&#125;## 定义虚拟路由， VI_1 为虚拟路由的标示符，自己定义名称vrrp_instance VI_1 &#123; state MASTER ## 主节点为 MASTER， 对应的备份节点为 BACKUP interface enp0s3 ## 绑定虚拟 IP 的网络接口，与本机 IP 地址所在的网络接口相同， 我的是 eth0 virtual_router_id 33 ## 虚拟路由的 ID 号， 两个节点设置必须一样， 可选 IP 最后一段使用, 相同的 VRID 为一个组，他将决定多播的 MAC 地址 mcast_src_ip 192.168.199.185 ## 本机 IP 地址 priority 100 ## 节点优先级， 值范围 0-254， MASTER 要比 BACKUP 高 nopreempt ## 优先级高的设置 nopreempt 解决异常恢复后再次抢占的问题 advert_int 1 ## 组播信息发送间隔，两个节点设置必须一样， 默认 1s ## 设置验证信息，两个节点必须一致 authentication &#123; auth_type PASS auth_pass 1111 ## 真实生产，按需求对应该过来 &#125; ## 将 track_script 块加入 instance 配置块 track_script &#123; chk_nginx ## 执行 Nginx 监控的服务 &#125; # # 虚拟 IP 池, 两个节点设置必须一样 virtual_ipaddress &#123; 192.168.199.130 ## 虚拟 ip，可以定义多个 &#125;&#125; 注意: 主存机上面不同的地方改四个：1，state（MASTER/BACKUP） 2,mcast_src_ip(主存机的ip) 3 priority （主机大于从机）4，router_id （hailoupc自行设置就行，可以两台机子不一样）virtual_ipaddress这个ip一定要是能访问到的虚拟ip，是网段内的一个有效ip，可以不存在但并必须有效编写 Nginx 状态检测脚本1vi /etc/keepalived/nginx_check.sh 123456789#!/bin/bashA=`ps -C nginx –no-header |wc -l`if [ $A -eq 0 ];then/usr/sbin/nginxsleep 2if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then killall keepalivedfifi 注意/usr/sbin/nginx这个路径要和nginx对应上保存后，给脚本赋执行权限：1chmod +x /etc/keepalived/nginx_check.sh 启动 Keepalived1service keepalived start","categories":[{"name":"环境部署","slug":"环境部署","permalink":"https://www.xshell.cn/blog/categories/环境部署/"}],"tags":[{"name":"keeplived","slug":"keeplived","permalink":"https://www.xshell.cn/blog/tags/keeplived/"},{"name":"nginx","slug":"nginx","permalink":"https://www.xshell.cn/blog/tags/nginx/"}]},{"title":"JS实现如果长时间不动页面，自动跳转到首页面","slug":"JS实现如果长时间不动页面，自动跳转到首页面","date":"2019-11-21T02:45:57.000Z","updated":"2019-11-21T02:46:43.865Z","comments":true,"path":"JS实现如果长时间不动页面，自动跳转到首页面/","link":"","permalink":"https://www.xshell.cn/JS实现如果长时间不动页面，自动跳转到首页面/","excerpt":"","text":"12345678910111213141516171819/* 如果5分钟不动页面，自动提示 */var maxTime = 300; // secondsvar time = maxTime;$(&apos;body&apos;).on(&apos;keydown mousemove mousedown&apos;, function(e) &#123; time = maxTime; // reset&#125;);var intervalId = setInterval(function() &#123; time--; if (time &lt;= 0) &#123; ShowInvalidLoginMessage(); clearInterval(intervalId); &#125;&#125;, 1000)function ShowInvalidLoginMessage() &#123; alert(&quot;您已经长时间没操作了，即将退出系统&quot;); //TODO 做需要做的操作 //exp:关闭页面 window.close();&#125;","categories":[{"name":"开发总结","slug":"开发总结","permalink":"https://www.xshell.cn/blog/categories/开发总结/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://www.xshell.cn/blog/tags/javascript/"}]},{"title":"WINDOWS下的MYSQL安装与卸载","slug":"WINDOWS下的MYSQL安装与卸载","date":"2019-11-21T02:43:15.000Z","updated":"2019-11-21T02:44:24.743Z","comments":true,"path":"WINDOWS下的MYSQL安装与卸载/","link":"","permalink":"https://www.xshell.cn/WINDOWS下的MYSQL安装与卸载/","excerpt":"安装过程下载后解压以管理员身份运行cmd，进入mysql-5.7.24-winx64\\bin目录下，执行mysqld install 发现很容易就提示服务为安装成功了。创建data目录","text":"安装过程下载后解压以管理员身份运行cmd，进入mysql-5.7.24-winx64\\bin目录下，执行mysqld install 发现很容易就提示服务为安装成功了。创建data目录 启动mysql net start mysql 发现mysql 没有启动起来.到data目录下，查看日志，找到xxx.err，密码在里面初始化数据：mysqld –initializedata目录下，会有三个目录生成，此时启动mysql，发现启动成功了set password for root@localhost = password(‘yihai123’);报错，所以要先flush privileges;再执行set password for root@localhost = password(‘yihai123’);mysql -u root -p登录就行了远程登录：进入mysql,执行GRANT ALL PRIVILEGES ON . TO ‘root‘@’%’ IDENTIFIED BY ‘yihai123’ WITH GRANT OPTION； FLUSH PRIVILEGES;来源https://www.cnblogs.com/liongong/p/9901162.html","categories":[{"name":"开发总结","slug":"开发总结","permalink":"https://www.xshell.cn/blog/categories/开发总结/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://www.xshell.cn/blog/tags/mysql/"}]},{"title":"pull时发面文件冲突的解决之道","slug":"pull时发面文件冲突的解决之道","date":"2019-11-21T02:41:52.000Z","updated":"2019-11-21T02:44:42.371Z","comments":true,"path":"pull时发面文件冲突的解决之道/","link":"","permalink":"https://www.xshell.cn/pull时发面文件冲突的解决之道/","excerpt":"stash翻译为“隐藏”，如下操作：git stashgit pullgit stash popgit diff","text":"stash翻译为“隐藏”，如下操作：git stashgit pullgit stash popgit diff git stash:备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。 git stash pop:从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。 git stash list:显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。 git stash clear:清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。","categories":[{"name":"Git","slug":"Git","permalink":"https://www.xshell.cn/blog/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://www.xshell.cn/blog/tags/Git/"}]},{"title":"git查看某个文件的提交历史","slug":"git查看某个文件的提交历史","date":"2019-11-21T02:39:42.000Z","updated":"2019-11-21T02:42:31.701Z","comments":true,"path":"git查看某个文件的提交历史/","link":"","permalink":"https://www.xshell.cn/git查看某个文件的提交历史/","excerpt":"用法 显示该文件的修改记录git log --pretty=oneline 文件名 接下来使用git show显示具体的某次的改动。git show &lt;git提交版本号&gt; &lt;文件名&gt;如果出面乱码：如:","text":"用法 显示该文件的修改记录git log --pretty=oneline 文件名 接下来使用git show显示具体的某次的改动。git show &lt;git提交版本号&gt; &lt;文件名&gt;如果出面乱码：如: 则要添加环境变量 LESSCHARSET=utf-8 若查看某一次提交的内容，执行下面命令（可以不加–stat，一般加上，不想看详细）git show 848255d52b288a6723849bfd5ae116ee1a7afc80 --stat","categories":[{"name":"Git","slug":"Git","permalink":"https://www.xshell.cn/blog/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://www.xshell.cn/blog/tags/Git/"}]},{"title":"历史流程实例表的id和流程实例id始终是一样","slug":"历史流程实例表的id和流程实例id始终是一样","date":"2019-11-21T02:36:40.000Z","updated":"2019-11-21T02:38:03.815Z","comments":true,"path":"历史流程实例表的id和流程实例id始终是一样/","link":"","permalink":"https://www.xshell.cn/历史流程实例表的id和流程实例id始终是一样/","excerpt":"历史流程实例表的id和流程实例id始终是一样 历史流程实例表的id和流程实例id始终是一样的。所以Activiti没有提供获取流程实例id的接口；因为直接getId()获取的值和流程实例Id是一样的；","text":"历史流程实例表的id和流程实例id始终是一样 历史流程实例表的id和流程实例id始终是一样的。所以Activiti没有提供获取流程实例id的接口；因为直接getId()获取的值和流程实例Id是一样的； 代码如下12345678910@Testpublic void getHistoryProcessInstance()&#123; HistoricProcessInstance hpi= processEngine.getHistoryService() // 历史任务Service .createHistoricProcessInstanceQuery() // 创建历史流程实例查询 .processInstanceId(&quot;2501&quot;) // 指定流程实例ID .singleResult(); System.out.println(&quot;流程实例ID:&quot;+hpi.getId()); System.out.println(&quot;创建时间：&quot;+hpi.getStartTime()); System.out.println(&quot;结束时间：&quot;+hpi.getEndTime());&#125;","categories":[{"name":"开发总结","slug":"开发总结","permalink":"https://www.xshell.cn/blog/categories/开发总结/"}],"tags":[{"name":"activiti","slug":"activiti","permalink":"https://www.xshell.cn/blog/tags/activiti/"}]},{"title":"linux基本环境配置","slug":"linux基本环境配置","date":"2019-11-21T02:22:26.000Z","updated":"2019-11-21T02:29:25.653Z","comments":true,"path":"linux基本环境配置/","link":"","permalink":"https://www.xshell.cn/linux基本环境配置/","excerpt":"（本步可选）在所有服务器上面进行，修改系统语言为英文，退出重新登录即可生效localectl set-locale LANG=en_US.UTF-8 所有服务器配置使用国内阿里云的源12345cd /etc/yum.repos.d/mkdir repo_bakmv *.repo repo_bak/wget http://mirrors.aliyun.com/repo/Centos-7.repowget http://mirrors.aliyun.com/repo/epel-7.repo","text":"（本步可选）在所有服务器上面进行，修改系统语言为英文，退出重新登录即可生效localectl set-locale LANG=en_US.UTF-8 所有服务器配置使用国内阿里云的源12345cd /etc/yum.repos.d/mkdir repo_bakmv *.repo repo_bak/wget http://mirrors.aliyun.com/repo/Centos-7.repowget http://mirrors.aliyun.com/repo/epel-7.repo 所有服务器的操作系统进行升级1234yum clean allyum makecacheyum repolistyum update -y 所有服务器校准系统时间12345yum -y install ntpsystemctl enable ntpd.servicentpdate 0.centos.pool.ntp.orgsystemctl start ntpd.servicedate 永久关闭所有服务器上面的 selinux 和 NetworkManager 这两个服务12systemctl stop NetworkManager.servicesystemctl disable NetworkManager.service 12setenforce 0vim /etc/selinux/config SELINUX=disabledSELINUXTYPE=targeted 永久关闭所有服务器上的 firewalld，启用 network1234systemctl disable firewalldsystemctl stop firewalldsystemctl enable networksystemctl start network （本步可选）修改所有服务器的主机名，如果需要的话1hostnamectl set-hostname &lt;you.com&gt; （本步可选）在所有服务器上面修改 /etc/hostname 和 /etc/hosts 两个文件，如下：（改完，logout，重新登录一次，就可以看到已经生效）1vim /etc/hostname you.com1vim /etc/hosts host_ip_addr you.com you 查看网卡信息:1ifconfig -a 修改ip，eth0是网卡名，我的是ifcfg-enp0s31vi /etc/sysconfig/network-scripts/ifcfg-enp0s3 重启网络服务1service network restart 在Linux上安装lrzsz1yum -y install lrzsz sz中的s意为send（发送），告诉客户端，我（服务器）要发送文件 send to cilent，就等同于客户端在下载。 rz中的r意为received（接收），告诉客户端，我（服务器）要接收文件 received by cilent，就等同于客户端在上传。用lszrz非常方便，但是有一点不足之处： 无法传输大于 4G 的文件。因为Centos7的默认安装类型是最小安装，所以默认安装没有自动补全的功能。要已用这个功能，需要安装一个bash-completion包，然后退出bash，重新登录即可。1yum install bash-completion -y","categories":[{"name":"环境部署","slug":"环境部署","permalink":"https://www.xshell.cn/blog/categories/环境部署/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://www.xshell.cn/blog/tags/linux/"}]},{"title":"Git merge分支到master","slug":"Git merge分支到master","date":"2019-04-14T15:10:17.000Z","updated":"2019-11-21T02:30:22.603Z","comments":true,"path":"Git merge分支到master/","link":"","permalink":"https://www.xshell.cn/Git merge分支到master/","excerpt":"本地拉一个分支出来1git checkout -b xxx 开发完以后提交到远程分支123git add .git commit -m &quot;commit xxx&quot;git push -u origin xxx","text":"本地拉一个分支出来1git checkout -b xxx 开发完以后提交到远程分支123git add .git commit -m &quot;commit xxx&quot;git push -u origin xxx 返回master1git checkout master 把本地的分支合并到master1git merge xxx 把本地的master同步到远程1git push origin master 如果不需要本地或者远程的xxx分支了，你可以选择删除。","categories":[{"name":"Git","slug":"Git","permalink":"https://www.xshell.cn/blog/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://www.xshell.cn/blog/tags/Git/"}]},{"title":"在本地用命令行创建一个git仓库，并推送到远程","slug":"在本地用命令行创建一个git仓库，并推送到远程","date":"2019-04-14T15:10:17.000Z","updated":"2019-11-21T02:29:36.393Z","comments":true,"path":"在本地用命令行创建一个git仓库，并推送到远程/","link":"","permalink":"https://www.xshell.cn/在本地用命令行创建一个git仓库，并推送到远程/","excerpt":"首先，进入项目目录下（没有的话自己创建一个）1cd funeral_import 在funeral_import目录下 初始化一个git仓库1git init","text":"首先，进入项目目录下（没有的话自己创建一个）1cd funeral_import 在funeral_import目录下 初始化一个git仓库1git init 复制一个文件到funeral_import目录下，然后执行git add .，将“修改”从当前工作区存放到暂存区1git add . 将暂存区中存放的文件提交到git仓库1git commit -m &quot;first commit&quot; 在远端新建一个git代码库：funeral_import，将本地代码库的当前分支与远程的代码库相关联1git remote add origin http://xxxxx/administrator/funeral_import.git 设置仓库属性，刚开发者用户加入到仓库中将本地代码库的当前分支推送到远程的代码库1git push -u origin master 另：命令补充！查看git仓库的远程代码库的地址：git remote -v","categories":[{"name":"Git","slug":"Git","permalink":"https://www.xshell.cn/blog/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://www.xshell.cn/blog/tags/Git/"}]},{"title":"git退回历史某一版本","slug":"git退回历史某一版本","date":"2019-04-14T15:10:17.000Z","updated":"2019-11-21T02:30:13.111Z","comments":true,"path":"git退回历史某一版本/","link":"","permalink":"https://www.xshell.cn/git退回历史某一版本/","excerpt":"先在idea中选择中这个","text":"先在idea中选择中这个 切换到master git checkout master，点一个，然后选择2那个值git checkout c634535c 可以看到黄色标签 回到最新的版本 git checkout master","categories":[{"name":"Git","slug":"Git","permalink":"https://www.xshell.cn/blog/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://www.xshell.cn/blog/tags/Git/"}]},{"title":"服务器安装JDK和supervisor","slug":"服务器安装JDK和supervisor","date":"2019-04-14T15:10:17.000Z","updated":"2019-11-21T02:30:33.752Z","comments":true,"path":"服务器安装JDK和supervisor/","link":"","permalink":"https://www.xshell.cn/服务器安装JDK和supervisor/","excerpt":"查询系统自带的openjdk1rpm -qa | grep java | grep openjdk 如果有，使用如下命令逐个全部卸载1rpm -e --nodeps 系统自带的jdk名","text":"查询系统自带的openjdk1rpm -qa | grep java | grep openjdk 如果有，使用如下命令逐个全部卸载1rpm -e --nodeps 系统自带的jdk名 检查是否卸载完成，卸载完成再进行下一步1rpm -qa | grep java | grep openjdk 安装jdk，需要事先把jdk的rpm文件放到/root下12cd /rootrpm -ivh jdk-8u162-linux-x64.rpm 检查是否安装成功12java -versionjavac -version 配置环境变量1vim /etc/profile 在文件的最后增加如下内容12345JAVA_HOME=/usr/java/jdk1.8.0_162JRE_HOME=$JAVA_HOME/jrePATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libexport JAVA_HOME JRE_HOME PATH CLASSPATH 使修改生效1source /etc/profile 安装supervisor1yum install -y supervisor 检查状态、启动、设置开机自动启动1234systemctl status supervisord.servicesystemctl start supervisord.servicesystemctl enable supervisord.servicesystemctl status supervisord.service","categories":[{"name":"环境部署","slug":"环境部署","permalink":"https://www.xshell.cn/blog/categories/环境部署/"}],"tags":[{"name":"supervisor","slug":"supervisor","permalink":"https://www.xshell.cn/blog/tags/supervisor/"}]}]}