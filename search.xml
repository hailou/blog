<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>docker-compose部署禅道研发项目管理平台</title>
    <url>/2020/06/03/docker-compose%E9%83%A8%E7%BD%B2%E7%A6%85%E9%81%93%E7%A0%94%E5%8F%91%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h3 id="镜像准备"><a href="#镜像准备" class="headerlink" title="镜像准备"></a>镜像准备</h3><blockquote>
<p>mkdir zentao</p>
</blockquote>
<h3 id="编写docker-compose-yml文件"><a href="#编写docker-compose-yml文件" class="headerlink" title="编写docker-compose.yml文件"></a>编写docker-compose.yml文件</h3><blockquote>
<p>cd zentao</p>
<p>vim docker-compose.yml</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  zentao:</span><br><span class="line">    image: idoop&#x2F;zentao:latest</span><br><span class="line">    container_name: ZentaoApplication</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      ADMINER_USER: &quot;admin&quot;</span><br><span class="line">      ADMINER_PASSWD: &quot;admin123&quot;</span><br><span class="line">      BIND_ADDRESS: &quot;false&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - 8091:80</span><br><span class="line">    volumes:</span><br><span class="line">      - .&#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime:ro</span><br><span class="line">      - .&#x2F;etc&#x2F;timezone:&#x2F;etc&#x2F;timezone</span><br><span class="line">      - .&#x2F;data&#x2F;zbox&#x2F;:&#x2F;opt&#x2F;zbox&#x2F;</span><br></pre></td></tr></table></figure>
<p>ADMINER_USER ：设置 Web 登录数据库管理员帐户</p>
<p>ADMINER_PASSWD ：设置 Web 登录数据库的管理员密码</p>
<p>BIND_ADDRESS：如果使用设置值 false，MySQL 服务器将不绑定地址</p>
<p>SMTP_HOST：设置smtp服务器的 IP 和主机。（如果无法发送邮件，将会有所帮助。）也可以 extra_host 在 docker-compose.yml 中使用，或在使用 docker run 命令时使用 –add-host</p>
<p>禅道管理员帐户为 admin，默认初始化密码为 123456。MySQL 的 root 帐户密码为 123456，在首次登录时更改密码。</p>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><blockquote>
<p> docker-compose up -d</p>
</blockquote>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git merge分支到master</title>
    <url>/2019/04/14/Git%20merge%E5%88%86%E6%94%AF%E5%88%B0master/</url>
    <content><![CDATA[<h6 id="本地拉一个分支出来"><a href="#本地拉一个分支出来" class="headerlink" title="本地拉一个分支出来"></a>本地拉一个分支出来</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b xxx</span><br></pre></td></tr></table></figure>
<h6 id="开发完以后提交到远程分支"><a href="#开发完以后提交到远程分支" class="headerlink" title="开发完以后提交到远程分支"></a>开发完以后提交到远程分支</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;commit xxx&quot;</span><br><span class="line">git push -u origin xxx</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h6 id="返回master"><a href="#返回master" class="headerlink" title="返回master"></a>返回master</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>
<h6 id="把本地的分支合并到master"><a href="#把本地的分支合并到master" class="headerlink" title="把本地的分支合并到master"></a>把本地的分支合并到master</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge xxx</span><br></pre></td></tr></table></figure>
<h6 id="把本地的master同步到远程"><a href="#把本地的master同步到远程" class="headerlink" title="把本地的master同步到远程"></a>把本地的master同步到远程</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<h6 id="如果不需要本地或者远程的xxx分支了，你可以选择删除。"><a href="#如果不需要本地或者远程的xxx分支了，你可以选择删除。" class="headerlink" title="如果不需要本地或者远程的xxx分支了，你可以选择删除。"></a>如果不需要本地或者远程的xxx分支了，你可以选择删除。</h6>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git查看某个文件的提交历史</title>
    <url>/2019/11/21/git%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2/</url>
    <content><![CDATA[<h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><ul>
<li>显示该文件的修改记录<br><code>git log --pretty=oneline 文件名</code></li>
<li>接下来使用git show显示具体的某次的改动。<br><code>git show &lt;git提交版本号&gt; &lt;文件名&gt;</code><h5 id="如果出面乱码：如"><a href="#如果出面乱码：如" class="headerlink" title="如果出面乱码：如:"></a>如果出面乱码：如:</h5></li>
</ul>
<a id="more"></a>

<p>则要添加环境变量 <code>LESSCHARSET=utf-8</code></p>
<p>若查看某一次提交的内容，执行下面命令（可以不加–stat，一般加上，不想看详细）<br><code>git show 848255d52b288a6723849bfd5ae116ee1a7afc80 --stat</code></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git退回历史某一版本</title>
    <url>/2019/04/14/git%E9%80%80%E5%9B%9E%E5%8E%86%E5%8F%B2%E6%9F%90%E4%B8%80%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h5 id="先在idea中选择中这个"><a href="#先在idea中选择中这个" class="headerlink" title="先在idea中选择中这个"></a>先在idea中选择中这个</h5><a id="more"></a>

<fancybox>
![](https://cdn.jsdelivr.net/gh/hailou/Figurebed/img/201912/20191226093213.png)
</fancybox>
##### 切换到master `git checkout master`，点一个，然后选择2那个值
<fancybox>
![](https://cdn.jsdelivr.net/gh/hailou/Figurebed/img/201912/20191226093211.png)
</fancybox>
`git checkout c634535c` 可以看到黄色标签
###### 回到最新的版本 `git checkout master`]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java删除数据库中的树形数据及下面的子数据</title>
    <url>/2021/01/25/Java%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E6%A0%91%E5%BD%A2%E6%95%B0%E6%8D%AE%E5%8F%8A%E4%B8%8B%E9%9D%A2%E7%9A%84%E5%AD%90%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void deleteContentCategory(Long parentId, Long id) &#123;</span><br><span class="line">     &#x2F;&#x2F; 声明存放需要删除的节点的容器</span><br><span class="line">     List&lt;Object&gt; ids &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">     &#x2F;&#x2F; 把自己的id放到ids中</span><br><span class="line">     ids.add(id);</span><br><span class="line">     &#x2F;&#x2F; 使用递归获取所有需要删除的节点的id</span><br><span class="line">     this.getIds(id, ids);</span><br><span class="line">     &#x2F;&#x2F; 使用父类的方法，批量删除</span><br><span class="line">     super.deleteByIds(ids);</span><br><span class="line">     &#x2F;&#x2F; 查询兄弟节点，声明查询条件</span><br><span class="line">     ContentCategory param &#x3D; new ContentCategory();</span><br><span class="line">     param.setParentId(parentId);</span><br><span class="line">     &#x2F;&#x2F; 执行查询</span><br><span class="line">     int count &#x3D; super.queryCountByWhere(param);</span><br><span class="line">     &#x2F;&#x2F; 判断是否没有兄弟节点</span><br><span class="line">     if (count &#x3D;&#x3D; 0) &#123;</span><br><span class="line">         &#x2F;&#x2F; 如果没有兄弟节点</span><br><span class="line">         ContentCategory parent &#x3D; new ContentCategory();</span><br><span class="line">         parent.setId(parentId);</span><br><span class="line">         &#x2F;&#x2F; 修改父节点的isParent为false</span><br><span class="line">         parent.setIsParent(false);</span><br><span class="line">         &#x2F;&#x2F; 执行修改</span><br><span class="line">         super.updateByIdSelective(parent);</span><br><span class="line">     &#125;</span><br><span class="line">     &#x2F;&#x2F; 如果还有兄弟节点，神马都不做</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 使用递归的方式查询所有的子节点的id</span><br><span class="line"> private void getIds(Long id, List&lt;Object&gt; ids) &#123;</span><br><span class="line">     &#x2F;&#x2F; 根据条件查询当前节点的所有的子节点</span><br><span class="line">     ContentCategory param &#x3D; new ContentCategory();</span><br><span class="line">     param.setParentId(id);</span><br><span class="line">     List&lt;ContentCategory&gt; list &#x3D; super.queryListByWhere(param);</span><br><span class="line">     &#x2F;&#x2F; 使用递归的方式，必须设置递归的停止条件，否则会一直自己调用自己，直到内存溢出</span><br><span class="line">     &#x2F;&#x2F; 判断是否还有子节点</span><br><span class="line">     if (list.size() &gt; 0) &#123;</span><br><span class="line">         &#x2F;&#x2F; 如果有子节点，遍历结果集</span><br><span class="line">         for (ContentCategory son : list) &#123;</span><br><span class="line">             &#x2F;&#x2F; 1.把子节点的id放到ids容器中</span><br><span class="line">             ids.add(son.getId());</span><br><span class="line">             &#x2F;&#x2F; 2.执行递归，自己调用自己，查询子节点的子</span><br><span class="line">             this.getIds(son.getId(), ids);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>递归处理JSON</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>java如何获取mac物理地址</title>
    <url>/2020/02/03/java%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96mac%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<p>java如何获取mac物理地址，<a href="https://blog.csdn.net/cdnight/article/details/86741265" title="原地址">原地址</a>，非原创</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.InterfaceAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.NetworkInterface;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacTools</span> </span>&#123;</span><br><span class="line">    <span class="comment">/***因为一台机器不一定只有一个网卡呀，所以返回的是数组是很合理的***/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getMacList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        java.util.Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        ArrayList&lt;String&gt; tmpMacList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (en.hasMoreElements()) &#123;</span><br><span class="line">            NetworkInterface iface = en.nextElement();</span><br><span class="line">            List&lt;InterfaceAddress&gt; addrs = iface.getInterfaceAddresses();</span><br><span class="line">            <span class="keyword">for</span> (InterfaceAddress addr : addrs) &#123;</span><br><span class="line">                InetAddress ip = addr.getAddress();</span><br><span class="line">                NetworkInterface network = NetworkInterface.getByInetAddress(ip);</span><br><span class="line">                <span class="keyword">if</span> (network == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">byte</span>[] mac = network.getHardwareAddress();</span><br><span class="line">                <span class="keyword">if</span> (mac == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                sb.delete(<span class="number">0</span>, sb.length());</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mac.length; i++) &#123;</span><br><span class="line">                    sb.append(String.format(<span class="string">&quot;%02X%s&quot;</span>, mac[i], (i &lt; mac.length - <span class="number">1</span>) ? <span class="string">&quot;-&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                tmpMacList.add(sb.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmpMacList.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> tmpMacList;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/***去重，别忘了同一个网卡的ipv4,ipv6得到的mac都是一样的，肯定有重复，下面这段代码是。。流式处理***/</span></span><br><span class="line">        List&lt;String&gt; unique = tmpMacList.stream().distinct().collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> unique;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进行 multi net address 测试===》&quot;</span>);</span><br><span class="line">        List&lt;String&gt; macs = getMacList();</span><br><span class="line">        System.out.println(<span class="string">&quot;本机的mac网卡的地址有：&quot;</span> + macs);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>代码案例</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>java递归list变成树结构的形式</title>
    <url>/2020/09/20/java%E9%80%92%E5%BD%92list%E5%8F%98%E6%88%90%E6%A0%91%E7%BB%93%E6%9E%84%E7%9A%84%E5%BD%A2%E5%BC%8F/</url>
    <content><![CDATA[<h6 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ObjectJSONFormat &#123;</span><br><span class="line"></span><br><span class="line">    private String id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String type;</span><br><span class="line">    private String parentId;</span><br><span class="line"></span><br><span class="line">    private List&lt;ObjectJSONFormat&gt; children &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="树结构的工具类"><a href="#树结构的工具类" class="headerlink" title="树结构的工具类"></a>树结构的工具类</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author hailou</span><br><span class="line"> * @Description 树结构的工具类</span><br><span class="line"> * @Date on 2020&#x2F;9&#x2F;17 9:27</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ObjectJSONFormatTree &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;ObjectJSONFormat&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public ObjectJSONFormatTree(List&lt;ObjectJSONFormat&gt; list) &#123;</span><br><span class="line">        this.list &#x3D; list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;建立树形结构</span><br><span class="line">    public List&lt;ObjectJSONFormat&gt; builTree() &#123;</span><br><span class="line">        List&lt;ObjectJSONFormat&gt; tree &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        for (ObjectJSONFormat node : getRootNode()) &#123;</span><br><span class="line">            node &#x3D; buildChilTree(node);</span><br><span class="line">            tree.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">        return tree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;递归，建立子树形结构</span><br><span class="line">    private ObjectJSONFormat buildChilTree(ObjectJSONFormat pNode) &#123;</span><br><span class="line">        List&lt;ObjectJSONFormat&gt; childrens &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        for (ObjectJSONFormat node : list) &#123;</span><br><span class="line">            if (node.getParentId().equals(pNode.getId())) &#123;</span><br><span class="line">                childrens.add(buildChilTree(node));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pNode.setChildren(childrens);</span><br><span class="line">        return pNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;获取根节点</span><br><span class="line">    private List&lt;ObjectJSONFormat&gt; getRootNode() &#123;</span><br><span class="line">        List&lt;ObjectJSONFormat&gt; rootLists &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        for (ObjectJSONFormat node : list) &#123;</span><br><span class="line">            if (node.getParentId().equals(&quot;0&quot;)) &#123;</span><br><span class="line">                rootLists.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return rootLists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;业务代码获取formatList，这里直接new一个，生产是获取的</span><br><span class="line">List&lt;ObjectJSONFormat&gt; formatList &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">formatList.add(...) &#x2F;&#x2F;若干ObjectJSONFormat</span><br><span class="line">&#x2F;&#x2F;创建树</span><br><span class="line">ObjectJSONFormatTree formatTree &#x3D; new ObjectJSONFormatTree(formatList);</span><br><span class="line">formatList &#x3D; formatTree.builTree();</span><br><span class="line">String jsonOutput &#x3D; JacksonUtils.getInstance().pojo2Json(formatList);</span><br><span class="line">System.out.println(jsonOutput);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>递归处理JSON</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON删除key或者value中的空值</title>
    <url>/2021/01/25/JSON%E5%88%A0%E9%99%A4key%E6%88%96%E8%80%85value%E4%B8%AD%E7%9A%84%E7%A9%BA%E5%80%BC/</url>
    <content><![CDATA[<h6 id="maven中的依赖"><a href="#maven中的依赖" class="headerlink" title="maven中的依赖"></a>maven中的依赖</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 阿里fastjson包JSON转换--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.47&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>工具类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author hailou</span><br><span class="line"> * @Description JSON删除key或者value中的空值</span><br><span class="line"> * @Date on 2020&#x2F;9&#x2F;18 11:09</span><br><span class="line"> *&#x2F;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONArray;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">public class JsonDealUtils &#123;</span><br><span class="line">    public static JSONObject getNoNullValue(String json) &#123;</span><br><span class="line">        JSONObject objTem&#x3D;JSON.parseObject(json);</span><br><span class="line">        JSONObject objRel&#x3D;JSON.parseObject(json);</span><br><span class="line">        return deal(objTem,objRel);</span><br><span class="line">    &#125;</span><br><span class="line">    private static JSONObject deal(JSONObject objTem,JSONObject objRel) &#123;</span><br><span class="line">        Set&lt;String&gt; keySet &#x3D; objTem.keySet();</span><br><span class="line">        Iterator&lt;String&gt; iterator &#x3D; keySet.iterator();</span><br><span class="line">        while(iterator.hasNext()) &#123;</span><br><span class="line">            String temp &#x3D;  iterator.next();&#x2F;&#x2F;存key</span><br><span class="line">            Object objR &#x3D; objTem.get(temp);&#x2F;&#x2F;存value</span><br><span class="line">            if(temp&#x3D;&#x3D;null||&quot;&quot;.equals(temp)||&quot;null&quot;.equals(temp)) &#123;</span><br><span class="line">                objRel.remove(temp);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if(objR&#x3D;&#x3D;null||&quot;&quot;.equals(objR.toString())||&quot;null&quot;.equals(objR.toString())||&quot;[]&quot;.equals(objR.toString())||&quot;&#123;&#125;&quot;.equals(objR.toString())) &#123;</span><br><span class="line">                objRel.remove(temp);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if(objR instanceof JSONObject) &#123;</span><br><span class="line">                JSONObject j&#x3D;(JSONObject)objR;</span><br><span class="line">                JSONObject object2 &#x3D; (JSONObject)objRel.get(temp);</span><br><span class="line">                deal(j,object2);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if(objR instanceof JSONArray) &#123;</span><br><span class="line">                JSONArray jsonArray &#x3D; objTem.getJSONArray(temp);</span><br><span class="line">                JSONArray jsonArray2 &#x3D; objRel.getJSONArray(temp);</span><br><span class="line">                for(int i&#x3D;0;i&lt;jsonArray.size();i++) &#123;</span><br><span class="line">                    deal(jsonArray.getJSONObject(i),jsonArray2.getJSONObject(i));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return objRel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>递归处理JSON</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON增加节点或者删除指定key的值</title>
    <url>/2021/01/25/JSON%E5%A2%9E%E5%8A%A0%E8%8A%82%E7%82%B9%E6%88%96%E8%80%85%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9Akey%E7%9A%84%E5%80%BC/</url>
    <content><![CDATA[<h6 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author hailou</span><br><span class="line"> * @Description JSON增加节点或者删除指定key的值</span><br><span class="line"> * @Date on 2020&#x2F;9&#x2F;18 11:09</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONArray;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line">public class JsonAddOrRemoveUtils &#123;</span><br><span class="line">    public static JSONObject addOrRemoveNodeByKeys(String json,String[] removeKeys, Map&lt;String,Object&gt; addNodes) &#123;</span><br><span class="line">        JSONObject objTem&#x3D;JSON.parseObject(json);</span><br><span class="line">        JSONObject objRel&#x3D;JSON.parseObject(json);</span><br><span class="line">        return dealOrCreate(objTem,objRel,removeKeys,addNodes);</span><br><span class="line">    &#125;</span><br><span class="line">    private static JSONObject dealOrCreate(JSONObject objTem, JSONObject objRel, String[] removeKeys, Map&lt;String,Object&gt; addNodes) &#123;</span><br><span class="line">        &#x2F;**</span><br><span class="line">        下面这段代码是批量增加节点时从当前的某个节点获取一个值塞进去</span><br><span class="line">        如:addNodes.put(&quot;key1&quot;,&quot;type&quot;);type就是当明节点的的一个key</span><br><span class="line">        把当前的key的值付给自定义节点的值，可能会做页面映射用</span><br><span class="line">        *&#x2F;</span><br><span class="line">        &#x2F;*if(null !&#x3D; addNodes &amp;&amp; !addNodes.keySet().isEmpty())&#123;</span><br><span class="line">            Set&lt;String&gt; keys &#x3D; addNodes.keySet();</span><br><span class="line">            Iterator&lt;String&gt; iteratorKeys &#x3D; keys.iterator();</span><br><span class="line">            while(iteratorKeys.hasNext()) &#123;</span><br><span class="line">                String key &#x3D;  iteratorKeys.next();</span><br><span class="line">                if(objTem.get(addNodes.get(key))!&#x3D;null)&#123;</span><br><span class="line">                    objRel.put(key,objTem.get(addNodes.get(key)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 这个就是把自定义节点插入进去，和上面代码取其一</span><br><span class="line">         *&#x2F;</span><br><span class="line">        if(null !&#x3D; addNodes &amp;&amp; !addNodes.keySet().isEmpty())&#123;</span><br><span class="line">            objRel.putAll(addNodes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keySet &#x3D; objTem.keySet();</span><br><span class="line">        Iterator&lt;String&gt; iterator &#x3D; keySet.iterator();</span><br><span class="line">        while(iterator.hasNext()) &#123;</span><br><span class="line">            String temp &#x3D;  iterator.next();&#x2F;&#x2F;存key</span><br><span class="line">            Object objR &#x3D; objTem.get(temp);&#x2F;&#x2F;存value</span><br><span class="line">            for (int i &#x3D; 0;  i&lt;removeKeys.length ; i++) &#123;</span><br><span class="line">                if(removeKeys[i].equals(temp)) &#123;</span><br><span class="line">                    objRel.remove(temp);</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(objR instanceof JSONObject) &#123;</span><br><span class="line">                JSONObject j&#x3D;(JSONObject)objR;</span><br><span class="line">                JSONObject object2 &#x3D; (JSONObject)objRel.get(temp);</span><br><span class="line">                dealOrCreate(j,object2,removeKeys,addNodes);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if(objR instanceof JSONArray) &#123;</span><br><span class="line">                JSONArray jsonArray &#x3D; objTem.getJSONArray(temp);</span><br><span class="line">                JSONArray jsonArray2 &#x3D; objRel.getJSONArray(temp);</span><br><span class="line">                for(int i&#x3D;0;i&lt;jsonArray.size();i++) &#123;</span><br><span class="line">                   dealOrCreate(jsonArray.getJSONObject(i),jsonArray2.getJSONObject(i),removeKeys,addNodes);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return objRel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;原始json，注意这里的json只是对象开头的，如果是[]开头的会报错</span><br><span class="line">String json &#x3D; &quot;&#123;\&quot;aa\&quot;:[&#123;\&quot;name\&quot;:\&quot;aaa\&quot;,\&quot;type\&quot;:\&quot;list\&quot;,\&quot;parentId\&quot;:\&quot;0\&quot;,\&quot;seat\&quot;:\&quot;1\&quot;,\&quot;children\&quot;:[&#123;\&quot;name\&quot;:\&quot;bbb\&quot;,\&quot;type\&quot;:\&quot;base\&quot;,\&quot;parentId\&quot;:\&quot;1\&quot;,\&quot;seat\&quot;:\&quot;1-1\&quot;,\&quot;children\&quot;:[]&#125;,&#123;\&quot;name\&quot;:\&quot;ccc\&quot;,\&quot;type\&quot;:\&quot;base\&quot;,\&quot;parentId\&quot;:\&quot;1\&quot;,\&quot;seat\&quot;:\&quot;1-2\&quot;,\&quot;children\&quot;:[]&#125;]&#125;,&#123;\&quot;name\&quot;:\&quot;ddd\&quot;,\&quot;type\&quot;:\&quot;map\&quot;,\&quot;parentId\&quot;:\&quot;0\&quot;,\&quot;seat\&quot;:\&quot;2\&quot;,\&quot;children\&quot;:[&#123;\&quot;name\&quot;:\&quot;eee\&quot;,\&quot;type\&quot;:\&quot;base\&quot;,\&quot;parentId\&quot;:\&quot;2\&quot;,\&quot;seat\&quot;:\&quot;2-1\&quot;,\&quot;children\&quot;:[]&#125;,&#123;\&quot;name\&quot;:\&quot;fff\&quot;,\&quot;type\&quot;:\&quot;map\&quot;,\&quot;parentId\&quot;:\&quot;2\&quot;,\&quot;seat\&quot;:\&quot;2-3\&quot;,\&quot;children\&quot;:[&#123;\&quot;name\&quot;:\&quot;ggg\&quot;,\&quot;type\&quot;:\&quot;base\&quot;,\&quot;parentId\&quot;:\&quot;2-3\&quot;,\&quot;seat\&quot;:\&quot;2-3-1\&quot;,\&quot;children\&quot;:[]&#125;]&#125;]&#125;]&#125;&quot;;</span><br><span class="line">System.out.println(&quot;json &#x3D; &quot; + json);</span><br><span class="line">&#x2F;&#x2F;要删除的节点</span><br><span class="line">String[] removeNames &#x3D; &#123;&quot;seat&quot;,&quot;parentId&quot;&#125;;</span><br><span class="line">&#x2F;&#x2F;调用删除方法</span><br><span class="line">Map&lt;String,Object&gt; addNodes &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">addNodes.put(&quot;key1&quot;,&quot;key1-value&quot;);</span><br><span class="line">addNodes.put(&quot;key2&quot;,&quot;key2-value&quot;);</span><br><span class="line">JSONObject node &#x3D; JsonAddOrRemoveUtils.addOrRemoveNodeByKeys(jsonOutput,removeNodeNames,addNodes);</span><br><span class="line">System.out.println(&quot;jsonOutput &#x3D; &quot; + node);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>递归处理JSON</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>JS实现如果长时间不动页面，自动跳转到首页面</title>
    <url>/2019/11/21/JS%E5%AE%9E%E7%8E%B0%E5%A6%82%E6%9E%9C%E9%95%BF%E6%97%B6%E9%97%B4%E4%B8%8D%E5%8A%A8%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC%E5%88%B0%E9%A6%96%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 如果5分钟不动页面，自动提示 *&#x2F;</span><br><span class="line">var maxTime &#x3D; 300; &#x2F;&#x2F; seconds</span><br><span class="line">var time &#x3D; maxTime;</span><br><span class="line">$(&#39;body&#39;).on(&#39;keydown mousemove mousedown&#39;, function(e) &#123;</span><br><span class="line">    time &#x3D; maxTime; &#x2F;&#x2F; reset</span><br><span class="line">&#125;);</span><br><span class="line">var intervalId &#x3D; setInterval(function() &#123;</span><br><span class="line">    time--;</span><br><span class="line">    if (time &lt;&#x3D; 0) &#123;</span><br><span class="line">        ShowInvalidLoginMessage();</span><br><span class="line">        clearInterval(intervalId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, 1000)</span><br><span class="line">function ShowInvalidLoginMessage() &#123;</span><br><span class="line">    alert(&quot;您已经长时间没操作了，即将退出系统&quot;);</span><br><span class="line">    &#x2F;&#x2F;TODO 做需要做的操作</span><br><span class="line">    &#x2F;&#x2F;exp:关闭页面</span><br><span class="line">    window.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发总结</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下安装mysql</title>
    <url>/2019/12/24/linux%E4%B8%8B%E5%AE%89%E8%A3%85mysql/</url>
    <content><![CDATA[<p>下面记录了我在Linux环境下安装Mysql的完整过程，如有错误或遗漏，欢迎指正。</p>
<h5 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h5><p>检查是否已经安装过mysql，执行命令</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]# rpm -qa | grep mysql</span><br></pre></td></tr></table></figure>
<p>从执行结果，可以看出我们已经安装了mysql-libs-5.1.73-5.el6_6.x86_64，执行删除命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]# rpm -e --nodeps mysql-libs-5.1.73-5.el6_6.x86_64</span><br></pre></td></tr></table></figure>
<p>再次执行查询命令，查看是否删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]# rpm -qa | grep mysql</span><br></pre></td></tr></table></figure>
<p>查询所有Mysql对应的文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]# whereis mysql</span><br><span class="line">mysql: &#x2F;usr&#x2F;bin&#x2F;mysql &#x2F;usr&#x2F;include&#x2F;mysql</span><br><span class="line">[root@localhost lib]# find &#x2F; -name mysql&#x2F;data&#x2F;mysql</span><br><span class="line">&#x2F;data&#x2F;mysql&#x2F;mysql</span><br></pre></td></tr></table></figure>
<p>删除相关目录或文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#  rm -rf &#x2F;usr&#x2F;bin&#x2F;mysql &#x2F;usr&#x2F;include&#x2F;mysql &#x2F;data&#x2F;mysql &#x2F;data&#x2F;mysql&#x2F;mysql </span><br></pre></td></tr></table></figure>
<p>验证是否删除完毕</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]# whereis mysql</span><br><span class="line">mysql:[root@localhost &#x2F;]# find &#x2F; -name mysql</span><br><span class="line">[root@localhost &#x2F;]# </span><br></pre></td></tr></table></figure>
<p>检查mysql用户组和用户是否存在，如果没有，则创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]# cat &#x2F;etc&#x2F;group | grep mysql</span><br><span class="line">[root@localhost &#x2F;]# cat &#x2F;etc&#x2F;passwd |grep mysql</span><br><span class="line">[root@localhost &#x2F;]# groupadd mysql</span><br><span class="line">[root@localhost &#x2F;]# useradd -r -g mysql mysql</span><br><span class="line">[root@localhost &#x2F;]# </span><br></pre></td></tr></table></figure>
<p>从官网下载是用于Linux的Mysql安装包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#  wget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;Downloads&#x2F;MySQL-5.7&#x2F;mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure>
<h5 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h5><p>在执行wget命令的目录下或你的上传目录下找到Mysql安装包：mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz<br>执行解压命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#  tar xzvf mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line">[root@localhost &#x2F;]# ls</span><br><span class="line">mysql-5.7.24-linux-glibc2.12-x86_64</span><br><span class="line">mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压完成后，可以看到当前目录下多了一个解压文件，移动该文件到/usr/local/mysql执行移动命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]# mv mysql-5.7.24-linux-glibc2.12-x86_64 &#x2F;usr&#x2F;local&#x2F;mysql</span><br></pre></td></tr></table></figure>
<p>在/usr/local/mysql目录下创建data目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]# mkdir &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br></pre></td></tr></table></figure>
<p>更改mysql目录下所有的目录及文件夹所属的用户组和用户，以及权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]# chown -R mysql:mysql &#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line">[root@localhost &#x2F;]# chmod -R 755 &#x2F;usr&#x2F;local&#x2F;mysql</span><br></pre></td></tr></table></figure>
<p>编译安装并初始化mysql,<strong>务必记住初始化输出日志末尾的密码（数据库管理员临时密码）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]# cd &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin</span><br><span class="line">[root@localhost bin]# .&#x2F;mysqld --initialize --user&#x3D;mysql --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql</span><br></pre></td></tr></table></figure>
<h5 id="补充说明：如果报错，请移步这里查看解决方案"><a href="#补充说明：如果报错，请移步这里查看解决方案" class="headerlink" title="补充说明：如果报错，请移步这里查看解决方案"></a>补充说明：如果报错，请移步这里<a href="https://www.jianshu.com/p/276d59cbc529">查看解决方案</a></h5><p>运行初始化命令成功后，输出日志如下：<br><strong>记录日志最末尾位置root@localhost:后的字符串，此字符串为mysql管理员临时登录密码。</strong></p>
<p>编辑配置文件my.cnf，添加配置如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]#  vi &#x2F;etc&#x2F;my.cnf</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br><span class="line">port &#x3D; 3306</span><br><span class="line">sql_mode&#x3D;NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line">symbolic-links&#x3D;0</span><br><span class="line">max_connections&#x3D;400</span><br><span class="line">innodb_file_per_table&#x3D;1</span><br><span class="line">#表名大小写不明感，敏感为</span><br><span class="line">lower_case_table_names&#x3D;1</span><br></pre></td></tr></table></figure>
<p>启动mysql服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]# &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server start</span><br></pre></td></tr></table></figure>
<p>查看是否存在mysql和mysqld的服务，如果存在，则结束进程，再重新执行启动命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询服务</span><br><span class="line">ps -ef | grep mysql</span><br><span class="line">ps -ef | grep mysqld</span><br><span class="line"></span><br><span class="line">#结束进程</span><br><span class="line">kill -9 PID</span><br><span class="line"></span><br><span class="line">#启动服务</span><br><span class="line"> &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server start</span><br></pre></td></tr></table></figure>
<p>添加软连接，并重启mysql服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#  ln -s &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server &#x2F;etc&#x2F;init.d&#x2F;mysql </span><br><span class="line">[root@localhost &#x2F;]#  ln -s &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysql &#x2F;usr&#x2F;bin&#x2F;mysql</span><br><span class="line">[root@localhost &#x2F;]#  service mysql restart</span><br></pre></td></tr></table></figure>
<p>登录mysql，修改密码(密码为步骤5生成的临时密码)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#  mysql -u root -p</span><br><span class="line">Enter password:</span><br><span class="line">mysql&gt;set password for root@localhost &#x3D; password(&#39;yourpass&#39;);</span><br></pre></td></tr></table></figure>
<p>开放远程连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;use mysql;</span><br><span class="line">msyql&gt;update user set user.Host&#x3D;&#39;%&#39; where user.User&#x3D;&#39;root&#39;;</span><br><span class="line">mysql&gt;flush privileges;</span><br></pre></td></tr></table></figure>
<p>设置开机自动启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、将服务文件拷贝到init.d下，并重命名为mysql</span><br><span class="line">[root@localhost &#x2F;]# cp &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server &#x2F;etc&#x2F;init.d&#x2F;mysqld</span><br><span class="line">2、赋予可执行权限</span><br><span class="line">[root@localhost &#x2F;]# chmod +x &#x2F;etc&#x2F;init.d&#x2F;mysqld</span><br><span class="line">3、添加服务</span><br><span class="line">[root@localhost &#x2F;]# chkconfig --add mysqld</span><br><span class="line">4、显示服务列表</span><br><span class="line">[root@localhost &#x2F;]# chkconfig --list</span><br></pre></td></tr></table></figure>
<p>说明：本教程非原创，来源<a href="https://www.jianshu.com/p/276d59cbc529">这里</a></p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>linux基本环境配置</title>
    <url>/2019/11/21/linux%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h5 id="基本环境配置"><a href="#基本环境配置" class="headerlink" title="基本环境配置"></a>基本环境配置</h5><p>在所有服务器上面进行，修改系统语言为英文，退出重新登录即可生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localectl set-locale LANG&#x3D;en_US.UTF-8</span><br></pre></td></tr></table></figure>
<p>所有服务器配置使用国内阿里云的源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;yum.repos.d&#x2F;</span><br><span class="line">mkdir repo_bak</span><br><span class="line">mv *.repo repo_bak&#x2F;</span><br><span class="line">wget http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo</span><br><span class="line">wget http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>所有服务器的操作系统进行升级</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">yum repolist</span><br><span class="line">yum update -y</span><br></pre></td></tr></table></figure>
<p>所有服务器校准系统时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install ntp</span><br><span class="line">systemctl enable ntpd.service</span><br><span class="line">ntpdate 0.centos.pool.ntp.org</span><br><span class="line">systemctl start ntpd.service</span><br><span class="line">date</span><br></pre></td></tr></table></figure>
<p>永久关闭所有服务器上面的 selinux 和 NetworkManager 这两个服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop NetworkManager.service</span><br><span class="line">systemctl disable NetworkManager.service</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">vim &#x2F;etc&#x2F;selinux&#x2F;config</span><br><span class="line">SELINUX&#x3D;disabled</span><br><span class="line">SELINUXTYPE&#x3D;targeted</span><br></pre></td></tr></table></figure>
<p>永久关闭所有服务器上的 firewalld，启用 network</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl enable network</span><br><span class="line">systemctl start network</span><br></pre></td></tr></table></figure>
<p>修改所有服务器的主机名，如果需要的话</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname &lt;you.com&gt;</span><br></pre></td></tr></table></figure>
<p>在所有服务器上面修改 /etc/hostname 和 /etc/hosts 两个文件，如下：（改完，logout，重新登录一次，就可以看到已经生效）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;hostname</span><br><span class="line">you.com</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;hosts</span><br><span class="line">host_ip_addr you.com you</span><br></pre></td></tr></table></figure>
<h5 id="修改IP"><a href="#修改IP" class="headerlink" title="修改IP"></a>修改IP</h5><p>查看网卡信息:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig -a</span><br></pre></td></tr></table></figure>
<p>修改ip，eth0是网卡名，我的是ifcfg-enp0s3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-enp0s3</span><br></pre></td></tr></table></figure>
<p>重启网络服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>
<h5 id="在Linux上安装lrzsz"><a href="#在Linux上安装lrzsz" class="headerlink" title="在Linux上安装lrzsz"></a>在Linux上安装lrzsz</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install lrzsz</span><br></pre></td></tr></table></figure>
<ul>
<li>sz中的s意为send（发送），告诉客户端，我（服务器）要发送文件 send to cilent，就等同于客户端在下载。</li>
<li>rz中的r意为received（接收），告诉客户端，我（服务器）要接收文件 received by cilent，就等同于客户端在上传。<br>用lszrz非常方便，但是有一点不足之处： 无法传输大于 4G 的文件。<h5 id="安装命令自动补全"><a href="#安装命令自动补全" class="headerlink" title="安装命令自动补全"></a>安装命令自动补全</h5>因为Centos7的默认安装类型是最小安装，所以默认安装没有自动补全的功能。要已用这个功能，需要安装一个bash-completion包，然后退出bash，重新登录即可。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install bash-completion -y</span><br></pre></td></tr></table></figure>
<h5 id="CentOS-7快速开放端口"><a href="#CentOS-7快速开放端口" class="headerlink" title="CentOS 7快速开放端口"></a>CentOS 7快速开放端口</h5>CentOS升级到7之后，发现无法使用iptables控制Linuxs的端口，baidu之后发现Centos 7使用firewalld代替了原来的iptables。下面记录如何使用firewalld开放Linux端口：</li>
</ul>
<p>开启端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]# firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure>
<p>查询端口号80 是否开启：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]# firewall-cmd --query-port&#x3D;80&#x2F;tcp</span><br></pre></td></tr></table></figure>
<p>重启防火墙：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]# firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<p>查询有哪些端口是开启的:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]# firewall-cmd --list-port</span><br></pre></td></tr></table></figure>
<p>命令含义：</p>
<ul>
<li> –zone #作用域</li>
<li> –add-port=80/tcp #添加端口，格式为：端口/通讯协议</li>
<li> –permanent #永久生效，没有此参数重启后失效</li>
</ul>
<p>关闭firewall：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#停止</span><br><span class="line">systemctl stop firewalld.service </span><br><span class="line">#禁止firewall开机启动</span><br><span class="line">firewallsystemctl disable firewalld.service </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux安装nginx 配置https</title>
    <url>/2019/12/13/linux%E5%AE%89%E8%A3%85nginx-%E9%85%8D%E7%BD%AEhttps/</url>
    <content><![CDATA[<h6 id="安装命令：-一定按照这样操作，不然后面很麻烦"><a href="#安装命令：-一定按照这样操作，不然后面很麻烦" class="headerlink" title="安装命令：(一定按照这样操作，不然后面很麻烦)"></a>安装命令：(一定按照这样操作，不然后面很麻烦)</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;下载tar包</span><br><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.17.0.tar.gz</span><br><span class="line"></span><br><span class="line">##进入nginx目录</span><br><span class="line">cd nginx-1.17.0</span><br><span class="line">## 配置</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line"></span><br><span class="line"># make</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h6 id="安装完成后，测试是否安装成功"><a href="#安装完成后，测试是否安装成功" class="headerlink" title="安装完成后，测试是否安装成功"></a>安装完成后，测试是否安装成功</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd 到刚才配置的安装目录&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;</span><br><span class="line">.&#x2F;sbin&#x2F;nginx -t</span><br></pre></td></tr></table></figure>
<h6 id="这样就是成功的，如果按照我上面的来的话，基本是没有问题的"><a href="#这样就是成功的，如果按照我上面的来的话，基本是没有问题的" class="headerlink" title="这样就是成功的，如果按照我上面的来的话，基本是没有问题的"></a>这样就是成功的，如果按照我上面的来的话，基本是没有问题的</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@MiWiFi-R3P-srv nginx]# .&#x2F;sbin&#x2F;nginx -t</span><br><span class="line">nginx: the configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf test is successful</span><br></pre></td></tr></table></figure>
<h6 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin</span><br><span class="line">.&#x2F;nginx &#x2F;&#x2F;启动nginx</span><br></pre></td></tr></table></figure>
<h6 id="下面是配置nginx-的https-conf"><a href="#下面是配置nginx-的https-conf" class="headerlink" title="下面是配置nginx 的https conf"></a>下面是配置nginx 的https conf</h6><p>配置ssl证书之前，先准备SSL证书，至于获取的途径很多（阿里云的服务，第三方服务购买）</p>
<p>准备好证书后，找到nginx的安装目录，我的安装位置为：/usr/local/nginx 打开nginx下面的conf 配置里面的nginx.conf ,新手可以把这个配置文件拉到本地配置</p>
<p>开始配置文件的修改在修改配置文件之前，最好做一个备份，防止修改错误，也能及时回退错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  需要访问的域名;</span><br><span class="line"></span><br><span class="line">        rewrite ^(.*) https:&#x2F;&#x2F;$server_name$1 permanent; #这句是代表 把http的域名请求转成https</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            proxy_pass   http:&#x2F;&#x2F;需要访问的域名; #因为这里还是80端口，所以保持http就可以了</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里除了HTTPS server这行之外，其他的 # 删除，启动https模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># HTTPS server</span><br><span class="line">   #</span><br><span class="line">   server &#123;</span><br><span class="line">       listen       443 ssl;</span><br><span class="line">       server_name  需要访问的域名，这里也不用加https;</span><br><span class="line"></span><br><span class="line">       ssl_certificate      &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;ssl&#x2F;ssl.pem;  #这里是ssl key文件存放的绝对路径，根据自己的文件名称和路径来写</span><br><span class="line">       ssl_certificate_key  &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;ssl&#x2F;ssl.key;  #这里是ssl key文件存放的绝对路径，根据自己的文件名称和路径来写</span><br><span class="line"></span><br><span class="line">       ssl_session_cache    shared:SSL:1m;</span><br><span class="line">       ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">       ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">       ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">       location &#x2F; &#123;</span><br><span class="line">           root   html;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">           proxy_pass   http:&#x2F;&#x2F;需要访问的域名:8080&#x2F;;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>接下来就是要让配置文件生效：进去nginx的sbin文件夹，我的sbin文件夹在：/usr/local/nginx/sbin执行以下语句：检验配置文件是否有错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;nginx -t</span><br><span class="line"></span><br><span class="line">#成功就是这样（安装我的流程走下来，一定是成功的）</span><br><span class="line">nginx: the configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf test is successful</span><br></pre></td></tr></table></figure>
<p><a href="https://www.jianshu.com/p/1ad30370b604">转自</a></p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>maven打包到docker后push到harbor</title>
    <url>/2020/07/09/maven%E6%89%93%E5%8C%85%E5%88%B0docker%E5%90%8Epush%E5%88%B0harbor/</url>
    <content><![CDATA[<p>公司项目需要，开始玩docker，开始折腾harbor，各种百度各种问题，满满的搞了一整天，终于搞定了maven打包到docker，然后push到harbor，现记录一下自己研究的成果。现在环境为远程私有仓库在阿里云，本地安装docker DeskTop，流利是先打包到本地docekr容器再推送到harbor。</p>
<h1 id="Ubuntu-安装-Docker"><a href="#Ubuntu-安装-Docker" class="headerlink" title="Ubuntu 安装 Docker"></a>Ubuntu 安装 Docker</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install docker.io</span><br></pre></td></tr></table></figure>
<h2 id="阿里云加速器（推荐）"><a href="#阿里云加速器（推荐）" class="headerlink" title="阿里云加速器（推荐）"></a>阿里云加速器（推荐）</h2><p><a href="https://promotion.aliyun.com/ntms/act/qwbk.html?userCode=hgqku7c5">点击链接获取</a></p>
<h1 id="Docker-Compose-安装"><a href="#Docker-Compose-安装" class="headerlink" title="Docker Compose 安装"></a>Docker Compose 安装</h1><p>Compose 支持 Linux、macOS、Windows 10 三大平台。在 Linux 上的也安装十分简单，从 <a href="https://github.com/docker/compose/releases">官方 GitHub Release</a> 处直接下载编译好的二进制文件即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.24.0&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class="line">chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose version</span><br><span class="line"></span><br><span class="line"># 输出如下</span><br><span class="line">docker-compose version 1.24.0, build 0aa59064</span><br><span class="line">docker-py version: 3.7.2</span><br><span class="line">CPython version: 3.6.8</span><br><span class="line">OpenSSL version: OpenSSL 1.1.0j  20 Nov 2018</span><br></pre></td></tr></table></figure>
<h1 id="安装harbor"><a href="#安装harbor" class="headerlink" title="安装harbor"></a>安装harbor</h1><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget <span class="symbol">https:</span>/<span class="regexp">/github.com/goharbor</span><span class="regexp">/harbor/releases</span><span class="regexp">/download/v</span>1.<span class="number">10.1</span>/harbor-offline-installer-v1.<span class="number">10.1</span>.tgz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar  -xvf harbor-offline-installer-v1.<span class="number">10.1</span>.tgz</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="打开文件-harbor-yml"><a href="#打开文件-harbor-yml" class="headerlink" title="打开文件 harbor.yml"></a>打开文件 harbor.yml</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改hostname，也可使用ip：132.232.22.xxx</span></span><br><span class="line">hostname: harbor.example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改端口号，默认为80，可以默认</span></span><br><span class="line">http:</span><br><span class="line">  <span class="comment"># port for http, default is 80. If https enabled, this port will redirect to https port</span></span><br><span class="line">  port: <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用https修改，不需要则注释即可</span></span><br><span class="line"><span class="comment">#https:</span></span><br><span class="line">  <span class="comment"># https port for harbor, default is 443</span></span><br><span class="line">  <span class="comment">#port: 443</span></span><br><span class="line">  <span class="comment"># The path of cert and key files for nginx</span></span><br><span class="line">  <span class="comment">#certificate: /your/certificate/path</span></span><br><span class="line">  <span class="comment">#private_key: /your/private/key/path</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改admin的密码</span></span><br><span class="line">harbor_admin_password: Harbor12345</span><br></pre></td></tr></table></figure>
<p>注意：修改三个地方：1，hostname为harbor的仓库IP.。2，注释掉https开头的这一堆，因为我打算用账户密码访问。3，修改harbor_admin_password</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查</span></span><br><span class="line">./prepare</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">./install</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>登录浏览器(<strong>因为我用的是http访问，所以用火狐，如果用谷歌，可能会登录不上</strong>)，使用上面配置的域名或者ip+port，进入harbor内创建一个项目test</p>
<h1 id="安装Docker-DeskTop"><a href="#安装Docker-DeskTop" class="headerlink" title="安装Docker DeskTop"></a>安装Docker DeskTop</h1><h2 id="打开客户端，修改docker-Engine"><a href="#打开客户端，修改docker-Engine" class="headerlink" title="打开客户端，修改docker Engine"></a>打开客户端，修改docker Engine</h2><p>{<br>  “registry-mirrors”: [],<br>  “insecure-registries”: [“47.91.220.3111”],<br>  “debug”: true,<br>  “experimental”: true<br>}</p>
<p>其中：insecure-registries为harbor的地址，开启http请求，experimental为true，能从公网下载镜像。</p>
<p><img src="http://blog.osyun.net/20200709141834.png"></p>
<h2 id="勾选如下"><a href="#勾选如下" class="headerlink" title="勾选如下"></a>勾选如下</h2><p><img src="http://blog.osyun.net/20200709141921.png"></p>
<h2 id="测试登录"><a href="#测试登录" class="headerlink" title="测试登录"></a>测试登录</h2><p>在cmd中输入</p>
<p>docker login 47.91.220.3111 输入用户名和密码（harbor的用户名和密码）</p>
<h1 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h1><pre><code>&lt;server&gt;
   &lt;!--maven的pom中可以根据这个id找到这个server节点的配置--&gt;  
   &lt;id&gt;docker-harbor-registry&lt;/id&gt;
   &lt;!--远程harbor的用户名--&gt;  
   &lt;username&gt;admin&lt;/username&gt;
   &lt;!--远程harbor的密码--&gt;  
   &lt;password&gt;Harbor12345&lt;/password&gt;
 &lt;/server&gt;</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--项目名,需要和Harbor中的项目名称保持一致 --&gt;</span><br><span class="line">&lt;docker.image.prefix&gt;mypro&lt;&#x2F;docker.image.prefix&gt;</span><br><span class="line">&lt;!-- docker私服地址,Harbor配置完默认地址就是服务器IP地址,默认不带端口号 --&gt;</span><br><span class="line">&lt;docker.registry&gt;47.91.220.3111&lt;&#x2F;docker.registry&gt;</span><br><span class="line">&lt;!--项目名,需要和Harbor中的项目名称保持一致 --&gt;</span><br><span class="line">&lt;docker.registry.name&gt;test&lt;&#x2F;docker.registry.name&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;app&lt;&#x2F;finalName&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;!-- Docker maven plugin --&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;com.spotify&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;docker-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.2&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;serverId&gt;docker-harbor-registry&lt;&#x2F;serverId&gt;</span><br><span class="line">                &lt;registryUrl&gt;http:&#x2F;&#x2F;$&#123;docker.registry&#125;&lt;&#x2F;registryUrl&gt;</span><br><span class="line">                &lt;!--必须配置dockerHost标签（除非配置系统环境变量DOCKER_HOST）--&gt;</span><br><span class="line">                &lt;dockerHost&gt;http:&#x2F;&#x2F;localhost:2375&lt;&#x2F;dockerHost&gt;</span><br><span class="line">                &lt;!--Building image 47.91.220.3111 &#x2F;demo1--&gt;</span><br><span class="line">                &lt;imageName&gt;$&#123;docker.registry&#125;&#x2F;$&#123;docker.registry.name&#125;&#x2F;$&#123;project.build.finalName&#125;:$&#123;project.version&#125;&lt;&#x2F;imageName&gt;</span><br><span class="line"></span><br><span class="line">                &lt;dockerDirectory&gt;src&#x2F;main&#x2F;docker&lt;&#x2F;dockerDirectory&gt;</span><br><span class="line">                &lt;resources&gt;</span><br><span class="line">                    &lt;resource&gt;</span><br><span class="line">                        &lt;targetPath&gt;&#x2F;&lt;&#x2F;targetPath&gt;</span><br><span class="line">                        &lt;directory&gt;$&#123;project.build.directory&#125;&lt;&#x2F;directory&gt;</span><br><span class="line">                        &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;&#x2F;include&gt;</span><br><span class="line">                    &lt;&#x2F;resource&gt;</span><br><span class="line">                &lt;&#x2F;resources&gt;</span><br><span class="line">            &lt;&#x2F;configuration&gt;</span><br><span class="line">        &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;!-- Docker maven plugin --&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<p>Dockerfile内容（src/main/docker下）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM openjdk:8-jdk-alpine</span><br><span class="line">VOLUME &#x2F;tmp</span><br><span class="line">ADD *.jar app.jar</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom&quot;,&quot;-jar&quot;,&quot;app.jar&quot;]</span><br></pre></td></tr></table></figure>
<h1 id="部署在其它服务器"><a href="#部署在其它服务器" class="headerlink" title="部署在其它服务器"></a>部署在其它服务器</h1><h2 id="docker开启http"><a href="#docker开启http" class="headerlink" title="docker开启http"></a>docker开启http</h2><p>如果不开启docker login时默认是https</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line"></span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;47.91.220.3111&quot;]</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>


<p>记录几个常用：</p>
<p>docker pull 47.91.220.3111/test/app:0.0.1</p>
<p>docker run -p 8989:8989 -name app -d  47.91.220.3111/test/app:0.0.1</p>
<p>docker logs -f -t –since=”2017-05-31” –tail=10 edu_web_1</p>
<p>–since : 此参数指定了输出日志开始日期，即只输出指定日期之后的日志。</p>
<p>-f : 查看实时日志</p>
<p>-t : 查看日志产生的日期</p>
<p>-tail=10 : 查看最后的10条日志。</p>
<p>edu_web_1 : 容器名称</p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>linux文件定时备份和数据库定时备份</title>
    <url>/2019/12/26/linux%E6%96%87%E4%BB%B6%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h5 id="图片文件复制"><a href="#图片文件复制" class="headerlink" title="图片文件复制"></a>图片文件复制</h5><p>说明：每日凌晨1点0分定时将文件从&lt;从数据库服务器&gt;复制到&lt;主数据库服务器&gt;，只复制新增的文件。<br>在&lt;主数据库服务器&gt;上面运行如下命令</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@exchange-db db-backup]# crontab -e</span><br><span class="line">0 1 * * * rsync -va root@172.17.0.112:&#x2F;opt&#x2F;nfs_yihai&#x2F;* &#x2F;opt&#x2F;nfs_yihai&#x2F;</span><br></pre></td></tr></table></figure>
<p>查看设置是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>
<h5 id="mysql数据库定时备份"><a href="#mysql数据库定时备份" class="headerlink" title="mysql数据库定时备份"></a>mysql数据库定时备份</h5><p>说明：每日凌晨1点0分定时备份数据。<br>创建db_backup.sh文件<br>内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">mysqldump -uroot -ppssword dbname | gzip &gt; &#x2F;opt&#x2F;db-backup&#x2F;dbname_$(date +%Y%m%d_%H%M%S).sql.gz</span><br></pre></td></tr></table></figure>
<p>加入到计划任务里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@exchange-db db-backup]# crontab -e</span><br><span class="line">0 1 * * * &#x2F;opt&#x2F;db-backup&#x2F;db_backup.sh</span><br></pre></td></tr></table></figure>
<p>查看设置是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>
<h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><ol>
<li>mysql和mysqldump出现<code>command not found </code>问题解决</li>
</ol>
<ul>
<li>查找mysql安装路径<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -name mysql</span><br></pre></td></tr></table></figure>
通常mysql安装路径在:<code>/usr/local/mysql/bin/mysql</code></li>
<li><code>mysql:command not found</code>建立软连接<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s  &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysql  &#x2F;usr&#x2F;bin</span><br></pre></td></tr></table></figure></li>
<li><code>mysqldump:command not found </code>建立软连接<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s  &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqldump  &#x2F;usr&#x2F;bin</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>如果密码中包含@时会报错<code>-bash: !@#&quot;: event not found</code>，需要修改命令，给-p密码加上单引号，如<code>-p&#39;yihai@123!@#&#39;</code></li>
</ol>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>minio利用docker安装集群环境</title>
    <url>/2020/07/14/minio%E5%88%A9%E7%94%A8docker%E5%AE%89%E8%A3%85%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>两台虚拟机</p>
<p>192.168.181.132（data,data1）</p>
<p>192.168.181.133（data,data1）</p>
<p>执行以下命令：</p>
<p>node1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d  --net&#x3D;host --restart&#x3D;always --name minio-node1 -e &quot;MINIO_ACCESS_KEY&#x3D;minio&quot;   -e&quot;MINIO_SECRET_KEY&#x3D;minio123&quot;   -v &#x2F;data:&#x2F;data -v &#x2F;data1:&#x2F;data1   minio&#x2F;minio server http:&#x2F;&#x2F;192.168.181.132:9000&#x2F;data&#x2F; http:&#x2F;&#x2F;192.168.181.132:9000&#x2F;data1&#x2F; http:&#x2F;&#x2F;192.168.181.133:9000&#x2F;data&#x2F; http:&#x2F;&#x2F;192.168.181.133:9000&#x2F;data1&#x2F;</span><br></pre></td></tr></table></figure>
<p>node2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d  --net&#x3D;host --restart&#x3D;always --name minio-node2 -e &quot;MINIO_ACCESS_KEY&#x3D;minio&quot;   -e&quot;MINIO_SECRET_KEY&#x3D;minio123&quot;   -v &#x2F;data:&#x2F;data -v &#x2F;data1:&#x2F;data1   minio&#x2F;minio server http:&#x2F;&#x2F;192.168.181.132:9000&#x2F;data&#x2F; http:&#x2F;&#x2F;192.168.181.132:9000&#x2F;data1&#x2F; http:&#x2F;&#x2F;192.168.181.133:9000&#x2F;data&#x2F; http:&#x2F;&#x2F;192.168.181.133:9000&#x2F;data1&#x2F;</span><br></pre></td></tr></table></figure>
<p>注意看这两个脚本不同之处只有一个地方：–name启的别名不一样，其它一模一样。这里我用–net=host可以创建但是改成-p 9000:9000就不通了。</p>
<p>这样访问：<a href="http://192.168.181.132:9000/%E7%BB%99%E9%87%8C%E9%9D%A2%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6">http://192.168.181.132:9000/给里面上传文件</a> ，另一个节点自动同步。</p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>minio</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL递归查询存储函数</title>
    <url>/2020/05/06/MySQL%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2%E5%AD%98%E5%82%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h6 id="向下查询（根据父级查询子级）"><a href="#向下查询（根据父级查询子级）" class="headerlink" title="向下查询（根据父级查询子级）"></a>向下查询（根据父级查询子级）</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_base_region <span class="keyword">WHERE</span> FIND_IN_SET(region_code,getRegionCodeListForDown(<span class="string">&#x27;01&#x27;</span>));</span><br></pre></td></tr></table></figure>
<h6 id="向上查询（根据子级查询父级）"><a href="#向上查询（根据子级查询父级）" class="headerlink" title="向上查询（根据子级查询父级）"></a>向上查询（根据子级查询父级）</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_base_region <span class="keyword">WHERE</span> FIND_IN_SET(region_code,getRegionCodeListForUp(<span class="string">&#x27;010101&#x27;</span>));</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h6 id="创建向下查询的存储函数，查询出符合要求的数据的region-code集合，以逗号拼接成字符串。"><a href="#创建向下查询的存储函数，查询出符合要求的数据的region-code集合，以逗号拼接成字符串。" class="headerlink" title="创建向下查询的存储函数，查询出符合要求的数据的region_code集合，以逗号拼接成字符串。"></a>创建向下查询的存储函数，查询出符合要求的数据的region_code集合，以逗号拼接成字符串。</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER<span class="operator">=</span>`<span class="keyword">skip</span><span class="operator">-</span>grants <span class="keyword">user</span>`@`<span class="keyword">skip</span><span class="operator">-</span>grants host` <span class="keyword">FUNCTION</span> `getRegionCodeListForDown`(upCode <span class="type">VARCHAR</span>(<span class="number">10</span>)) <span class="keyword">RETURNS</span> <span class="type">varchar</span>(<span class="number">4096</span>) CHARSET utf8</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> returnCodeList <span class="type">VARCHAR</span>(<span class="number">4096</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> selectCode <span class="type">VARCHAR</span>(<span class="number">4096</span>);</span><br><span class="line"><span class="keyword">SET</span> returnCodeList <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> selectCode <span class="operator">=</span> upCode;</span><br><span class="line">WHILE selectCode <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> DO</span><br><span class="line"><span class="keyword">SET</span> returnCodeList <span class="operator">=</span> CONCAT(returnCodeList,<span class="string">&#x27;,&#x27;</span>,selectCode);</span><br><span class="line"><span class="keyword">select</span> GROUP_CONCAT(region_code) <span class="keyword">INTO</span> selectCode <span class="keyword">FROM</span> tb_base_region <span class="keyword">WHERE</span> FIND_IN_SET(parent_code,selectCode) <span class="operator">&gt;</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> returnCodeList;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>
<h6 id="创建向上查询的存储函数，查询出符合要求的数据的region-code集合。"><a href="#创建向上查询的存储函数，查询出符合要求的数据的region-code集合。" class="headerlink" title="创建向上查询的存储函数，查询出符合要求的数据的region_code集合。"></a>创建向上查询的存储函数，查询出符合要求的数据的region_code集合。</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  DEFINER<span class="operator">=</span>`<span class="keyword">skip</span><span class="operator">-</span>grants <span class="keyword">user</span>`@`<span class="keyword">skip</span><span class="operator">-</span>grants host` <span class="keyword">FUNCTION</span> `getRegionCodeListForUp`(downCode <span class="type">VARCHAR</span>(<span class="number">10</span>)) <span class="keyword">RETURNS</span> <span class="type">varchar</span>(<span class="number">4096</span>) CHARSET utf8</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> returnCodeList <span class="type">VARCHAR</span>(<span class="number">4096</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> selectCode <span class="type">VARCHAR</span>(<span class="number">4096</span>);</span><br><span class="line"><span class="keyword">SET</span> returnCodeList <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> selectCode <span class="operator">=</span> downCode;</span><br><span class="line"><span class="comment">-- WHILE selectCode IS NOT NULL DO  -- 判断条件视情况而定</span></span><br><span class="line">WHILE selectCode <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">AND</span> downId <span class="keyword">in</span> (<span class="keyword">select</span> downCode <span class="keyword">from</span> tb_base_region) DO</span><br><span class="line"><span class="keyword">SET</span> returnCodeList <span class="operator">=</span> CONCAT(returnCodeList,<span class="string">&#x27;,&#x27;</span>,selectCode);</span><br><span class="line"><span class="keyword">SELECT</span> parent_code <span class="keyword">into</span> selectCode <span class="keyword">from</span> tb_base_region <span class="keyword">WHERE</span> region_code <span class="operator">=</span> selectCode;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> returnCodeList;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>代码案例</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo+GitHub图床，让Markdown飞</title>
    <url>/2019/01/25/PicGo-GitHub%E5%9B%BE%E5%BA%8A%EF%BC%8C%E8%AE%A9Markdown%E9%A3%9E/</url>
    <content><![CDATA[<p>做了一个简单的总结，喜欢的可以自己试一下。PicGo的设置如下</p>
<a id="more"></a>

<p><img src="https://cdn.jsdelivr.net/gh/hailou/Figurebed/img/201912/20191225180540.png"></p>
<h5 id="github设置图床"><a href="#github设置图床" class="headerlink" title="github设置图床"></a>github设置图床</h5><p>设置仓库名：hailou/Figurebed<br>设定分支名：master<br>设定token：fff851120fb45ebaadf22c6ac6a616a226b43ce9<br>指定存储路径：img/201912/<br>设置自定义域名：<br><a href="https://raw.githubusercontent.com/hailou/Figurebed/master">https://raw.githubusercontent.com/hailou/Figurebed/master</a><br>cdnUrl:<br><a href="https://cdn.jsdelivr.net/gh/hailou/Figurebed">https://cdn.jsdelivr.net/gh/hailou/Figurebed</a><br>如：<br><a href="https://cdn.jsdelivr.net/gh/hailou/Figurebed/img/201912/20191226152805.jpg">https://cdn.jsdelivr.net/gh/hailou/Figurebed/img/201912/20191226152805.jpg</a><br><a href="https://raw.githubusercontent.com/hailou/Figurebed/master/img/201912/20191226152805.jpg">https://raw.githubusercontent.com/hailou/Figurebed/master/img/201912/20191226152805.jpg</a></p>
<h5 id="七牛图床"><a href="#七牛图床" class="headerlink" title="七牛图床"></a>七牛图床</h5><p>设定AK：设定AK<br>设定SK：设定SK<br>设定存储命名空间：hailou-blog<br>设定访问地址：<a href="http://blog.osyun.net/">http://blog.osyun.net</a><br>确认存储区域：z1</p>
]]></content>
      <categories>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>pull时发面文件冲突的解决之道</title>
    <url>/2019/11/21/pull%E6%97%B6%E5%8F%91%E9%9D%A2%E6%96%87%E4%BB%B6%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E4%B9%8B%E9%81%93/</url>
    <content><![CDATA[<h6 id="stash翻译为“隐藏”，如下操作："><a href="#stash翻译为“隐藏”，如下操作：" class="headerlink" title="stash翻译为“隐藏”，如下操作："></a>stash翻译为“隐藏”，如下操作：</h6><p><code>git stash</code><br><code>git pull</code><br><code>git stash pop</code><br><code>git diff</code></p>
<a id="more"></a>

<h5 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash:"></a>git stash:</h5><p>备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</p>
<h5 id="git-stash-pop"><a href="#git-stash-pop" class="headerlink" title="git stash pop:"></a>git stash pop:</h5><p>从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。</p>
<h5 id="git-stash-list"><a href="#git-stash-list" class="headerlink" title="git stash list:"></a>git stash list:</h5><p>显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</p>
<h5 id="git-stash-clear"><a href="#git-stash-clear" class="headerlink" title="git stash clear:"></a>git stash clear:</h5><p>清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>shell在指定目录下批量执行sql脚本的实例</title>
    <url>/2020/04/14/shell%E5%9C%A8%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%B9%E9%87%8F%E6%89%A7%E8%A1%8Csql%E8%84%9A%E6%9C%AC%E7%9A%84%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h6 id="shell在指定目录下批量执行sql脚本的实例"><a href="#shell在指定目录下批量执行sql脚本的实例" class="headerlink" title="shell在指定目录下批量执行sql脚本的实例"></a>shell在指定目录下批量执行sql脚本的实例</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">execute all script <span class="keyword">in</span> specified directory</span></span><br><span class="line">MYDATE=`date +%F&#x27;-&#x27;%T&#x27;-&#x27;%w`</span><br><span class="line">MYSQL_PATH=/tmp/scripts #指定的目录</span><br><span class="line">LOG_FILE=/tmp/scripts/exec_$&#123;MYDATE&#125;.log</span><br><span class="line">confirm=</span><br><span class="line">db_name=</span><br><span class="line">db_pass=</span><br><span class="line">for file in $&#123;MYSQL_PATH&#125;/*</span><br><span class="line">do</span><br><span class="line">if [ -f &quot;$file&quot; ] ; then</span><br><span class="line">postfix=`echo $file | awk -F&#x27;.&#x27; &#x27;&#123;print &quot;.&quot;$NF&#125;&#x27;`</span><br><span class="line"> if [ $postfix = &quot;.sql&quot; ] ; then</span><br><span class="line">  if [ ! $db_name ] ; then #如果没有指定数据库</span><br><span class="line">  read -p &quot;请输入数据库名：&quot; db_name</span><br><span class="line">  read -p &quot;你输入的数据名是【$db_name】，确认继续请输入--yes--: &quot; confirm</span><br><span class="line">  fi</span><br><span class="line">  if [ &quot;$confirm&quot; = &quot;yes&quot; ] &amp;&amp; [ -n $confirm ] ; then</span><br><span class="line">  if [ ! $db_pass ] ; then #如果没有设置密码</span><br><span class="line">   stty -echo #密码输入保护关闭显示</span><br><span class="line">   read -p &quot;请输入数据库密码：&quot; db_pass</span><br><span class="line">   echo -e &quot;\n&quot;</span><br><span class="line">   stty echo</span><br><span class="line">  fi</span><br><span class="line">  mysql -uroot -p$db_pass -P3306 --default-character-set=utf8 $&#123;db_name&#125; &lt; $file &gt;&amp; error.log</span><br><span class="line">  echo $file </span><br><span class="line">  echo -e &quot;\n===========$file=============\n&quot; &gt;&gt;$&#123;LOG_FILE&#125;</span><br><span class="line">  cat error.log &gt;&gt;$&#123;LOG_FILE&#125; #输出执行日志</span><br><span class="line">  error=`grep ERROR error.log` #读取错误日志信息</span><br><span class="line">  if [ -n &quot;$error&quot; ] ; then #如果有错误就退出程序</span><br><span class="line">   echo $error</span><br><span class="line">   exit</span><br><span class="line">  fi</span><br><span class="line">  else</span><br><span class="line">  echo &quot;您已经取消操作!&quot;</span><br><span class="line">  exit</span><br><span class="line">  fi</span><br><span class="line"> fi</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h6 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h6><p>今天遇到这个问题: -bash: ./yihai.sh: /bin/bash^M: bad interpreter: No such file or directory，找到问题是因为用notepad++编写的脚本，需要转换一下，在命令行输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &quot;s/\r//&quot; cleanup.sh</span><br></pre></td></tr></table></figure>
<p>再次执行./yihai.sh,就可以了</p>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 哨兵（sentinel）模式集群配置（5.0.5版本）</title>
    <url>/2019/12/01/Redis-%E5%93%A8%E5%85%B5%EF%BC%88sentinel%EF%BC%89%E6%A8%A1%E5%BC%8F%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%EF%BC%885-0-5%E7%89%88%E6%9C%AC%EF%BC%89/</url>
    <content><![CDATA[<h5 id="系统环境：CentOS7"><a href="#系统环境：CentOS7" class="headerlink" title="系统环境：CentOS7"></a>系统环境：CentOS7</h5><h5 id="服务器2台（1主1从）：192-168-31-2（master）192-168-31-3（slave）"><a href="#服务器2台（1主1从）：192-168-31-2（master）192-168-31-3（slave）" class="headerlink" title="服务器2台（1主1从）：192.168.31.2（master）192.168.31.3（slave）"></a>服务器2台（1主1从）：192.168.31.2（master）192.168.31.3（slave）</h5><h5 id="redis版本：5-0-5"><a href="#redis版本：5-0-5" class="headerlink" title="redis版本：5.0.5"></a>redis版本：5.0.5</h5><h5 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h5><ul>
<li>进入到目录：cd /usr/local</li>
<li>下载redis：wget <a href="http://download.redis.io/releases/redis-5.0.5.tar.gz">http://download.redis.io/releases/redis-5.0.5.tar.gz</a></li>
<li>下载完成后解压：tar zxvf redis-5.0.5.tar.gz</li>
<li>重命名为redis文件夹：mv redis-5.0.5 redis</li>
<li>进入到redis文件夹：cd redis</li>
<li>编译及安装：make &amp;&amp; make install</li>
<li>特别说明：官方文档只给出了make（编译），没有给出make install（安装）</li>
</ul>
<a id="more"></a>

<h5 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h5><ul>
<li>Master配置，把master的redis.conf拷贝了一份命名为redis_master.conf</li>
<li>内容如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### NETWORK 设置：</span><br><span class="line">#bind 0.0.0.0</span><br><span class="line">#保护模式关闭，这里使用密码访问</span><br><span class="line">protected-mode no</span><br><span class="line">#设置端口，建议测试时可以使用默认端口，我这里改掉了，建议生产环境均使用自定义端口</span><br><span class="line">port 17000</span><br><span class="line">#Client 端空闲断开连接的时间</span><br><span class="line">timeout 30</span><br><span class="line"></span><br><span class="line">### GENERAL 设置：</span><br><span class="line">#后台模式运行</span><br><span class="line">daemonize yes</span><br><span class="line">#pid进程文件名</span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_17000.pid</span><br><span class="line">#日志文件的位置</span><br><span class="line">logfile &#x2F;usr&#x2F;local&#x2F;redis&#x2F;logs&#x2F;redis.log</span><br><span class="line"></span><br><span class="line">### SNAPSHOTTING 设置：</span><br><span class="line">#快照文件的路径</span><br><span class="line">dir &#x2F;usr&#x2F;local&#x2F;redis&#x2F;datas</span><br><span class="line"></span><br><span class="line">### APPEND ONLY MODE 设置：</span><br><span class="line">#默认值是No，意思是不使用AOF增量持久化的方式，使用RDB全量持久化的方式。把No值改成Yes，使用AOF增量持久化的方式</span><br><span class="line">appendonly yes</span><br><span class="line">appendfsync always</span><br><span class="line"></span><br><span class="line">###SECURITY 设置密码:，生产环境一定要使用复杂密码</span><br><span class="line">requirepass 123456</span><br><span class="line"></span><br><span class="line">#必需配置这个，不然当主节点死了后，从替代主。原来的主节点启动后变成从节点后，数据不能同步，因为从变主后，认证不通过，这个就需要把原来的从的密码给配置上。</span><br><span class="line">masterauth 123456</span><br></pre></td></tr></table></figure></li>
<li>Slave配置，我把master的redis.conf拷贝了一份命名为redis_slave.conf</li>
<li>内容如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### NETWORK 设置：</span><br><span class="line"># bind 127.0.0.1 #注释掉bind，任何ip均可访问</span><br><span class="line">#设置端口</span><br><span class="line">port 17000</span><br><span class="line">#保护模式关闭，使用密码访问</span><br><span class="line">protected-mode no</span><br><span class="line">#Client 端空闲断开连接的时间</span><br><span class="line">timeout 30</span><br><span class="line"></span><br><span class="line">### GENERAL 设置：</span><br><span class="line">#后台模式运行</span><br><span class="line">daemonize yes</span><br><span class="line">#pid进程文件名</span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_17000.pid</span><br><span class="line">#日志文件的位置</span><br><span class="line">logfile &#x2F;usr&#x2F;local&#x2F;redis&#x2F;logs&#x2F;redis.log</span><br><span class="line"></span><br><span class="line">### SNAPSHOTTING 设置：</span><br><span class="line">#快照文件的路径</span><br><span class="line">dir &#x2F;usr&#x2F;local&#x2F;redis&#x2F;datas</span><br><span class="line"></span><br><span class="line">### REPLICATION 设置：</span><br><span class="line">#主服务器的Ip地址和Port端口号</span><br><span class="line">replicaof 192.168.31.2 17000</span><br><span class="line">#如果slave 无法与master 同步，设置成slave不可读，方便监控脚本发现问题。</span><br><span class="line">replica-serve-stale-data no</span><br><span class="line">#master的密码</span><br><span class="line">masterauth 123456</span><br><span class="line"></span><br><span class="line">### APPEND ONLY MODE 设置：</span><br><span class="line">#默认值是No，意思是不使用AOF增量持久化的方式，使用RDB全量持久化的方式。把No值改成Yes，使用AOF增量持久化的方式</span><br><span class="line">appendonly yes</span><br><span class="line">appendfsync always</span><br><span class="line"></span><br><span class="line">###SECURITY 设置密码:，生产环境一定要使用复杂密码</span><br><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure></li>
<li>Sentinel（哨兵）配置，配置文件为sentinel.conf</li>
<li>内容如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#哨兵端口号</span><br><span class="line">port 16000</span><br><span class="line">#关闭保护模式</span><br><span class="line">protected-mode no</span><br><span class="line">#守护进程</span><br><span class="line">daemonize yes</span><br><span class="line">#哨兵程序的工作路径</span><br><span class="line">dir &#x2F;usr&#x2F;local&#x2F;redis&#x2F;sentinel&#x2F;</span><br><span class="line">#哨兵程序的工作日志文件</span><br><span class="line">logfile &quot;sentinel.log&quot;</span><br><span class="line"></span><br><span class="line">#Sentinel去监视一个名为mymaster的主redis实例，这个主实例的IP地址为本机地址192.168.31.2，端口号为17000，而将这个主实例判断为失效至少需要1个 Sentinel进程的同意，只要同意Sentinel的数量不达标，自动failover就不会执行</span><br><span class="line">#这个一定要放在下面这句的上面，不然sentinel启动不了</span><br><span class="line">sentinel monitor mymaster 192.168.31.2 17000 1</span><br><span class="line">#master的访问密码</span><br><span class="line">sentinel auth-pass mymaster 123456</span><br><span class="line">#哨兵程序每5秒检测一次Master是否正常</span><br><span class="line">sentinel down-after-milliseconds mymaster 5000</span><br><span class="line"></span><br><span class="line">#指定了在执行故障转移时，最多可以有多少个从Redis实例在同步新的主实例，在从Redis实例较多的情况下这个数字越小，同步的时间越长，完成故障转移所需的时间就越长</span><br><span class="line">sentinel parallel-syncs mymaster 2</span><br><span class="line">#如果在该时间（ms）内未能完成failover操作，则认为该failover失败，生产环境需要根据数据量设置该值</span><br><span class="line">sentinel failover-timeout mymaster 300000</span><br></pre></td></tr></table></figure>
<h5 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h5></li>
<li>在各服务器上先建立配置文件中需要的文件夹</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;redis&#x2F;datas</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;redis&#x2F;logs</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;redis&#x2F;sentinel</span><br></pre></td></tr></table></figure>

<ul>
<li>启动服务,先开启master服务，也就是192.168.31.2服务器,启动master:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;src</span><br><span class="line">.&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;redis_master.conf</span><br></pre></td></tr></table></figure>
<ul>
<li>启动服务,启动slave服务:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;src</span><br><span class="line">.&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;redis_slave.conf</span><br></pre></td></tr></table></figure>
<ul>
<li><p>使用redis-cli访问服务端，在master上查看状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-cli -p 17000 -a 123456</span><br><span class="line">127.0.0.1:17000&gt; info replication</span><br></pre></td></tr></table></figure></li>
<li><p>这里有具体的集群信息（略）</p>
</li>
<li><p>启动Sentinel（哨兵）进程   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-sentinel &#x2F;usr&#x2F;local&#x2F;redis&#x2F;sentinel.conf</span><br></pre></td></tr></table></figure></li>
<li><p>说明：哨兵进程不一定与redis数量一致，也不一定要放在redis服务器上，sentinel的作用是监控所有服务及与其它哨兵通信，若sentinel单独放其它服务器上，则也需要安装redis，sentinel只是redis软件包中的一个服务，每台服务器上都放了一个sentinel进程，sentinel的配置都是一样的，将这个sentinel.conf拷贝几个放在slave的机器上。</p>
</li>
<li><p>查看下进程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps aux | grep redis</span><br></pre></td></tr></table></figure></li>
<li><p>set aaa a 测试下数据是否同步</p>
<h5 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h5></li>
<li><p>模拟master宕机，这里直接把master进程杀掉 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill -9 2730</span><br></pre></td></tr></table></figure></li>
<li><p>看下从节点是否变主节点，再启动原来主节点，测试是否正确</p>
<h5 id="当sentinel设置2为down（客观下线）后，这些sentinel开始进行投票选举，这里特别注意，选举的不是redis-server服务，而是sentinel服务，意思就是先选举一个sentinel，然后由它决定将哪个slave提升为master。"><a href="#当sentinel设置2为down（客观下线）后，这些sentinel开始进行投票选举，这里特别注意，选举的不是redis-server服务，而是sentinel服务，意思就是先选举一个sentinel，然后由它决定将哪个slave提升为master。" class="headerlink" title="当sentinel设置2为down（客观下线）后，这些sentinel开始进行投票选举，这里特别注意，选举的不是redis_server服务，而是sentinel服务，意思就是先选举一个sentinel，然后由它决定将哪个slave提升为master。"></a>当sentinel设置2为down（客观下线）后，这些sentinel开始进行投票选举，这里特别注意，选举的不是redis_server服务，而是sentinel服务，意思就是先选举一个sentinel，然后由它决定将哪个slave提升为master。</h5></li>
<li><p>参考了<a href="https://www.cnblogs.com/chensuqian/p/10538365.html">这里</a>，但实际做的时候遇到了很多问题，解决的方案都体现在配置文件里。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>sql语句书写小技巧</title>
    <url>/2020/07/21/sql%E8%AF%AD%E5%8F%A5%E4%B9%A6%E5%86%99%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h6 id="sql语句书写顺序"><a href="#sql语句书写顺序" class="headerlink" title="sql语句书写顺序"></a>sql语句书写顺序</h6><pre><code>       select---&gt;from---&gt;where---&gt;group by---&gt;having---&gt;order by</code></pre>
<h6 id="sql语句解析顺序"><a href="#sql语句解析顺序" class="headerlink" title="sql语句解析顺序"></a>sql语句解析顺序</h6><pre><code>     from---&gt;where---&gt;group by---&gt; having---&gt;select---&gt;order by</code></pre>
<a id="more"></a>]]></content>
      <categories>
        <category>开发总结</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows/Office 激活及KMS服务器搭建</title>
    <url>/2019/11/28/Windows-Office-%E6%BF%80%E6%B4%BB%E5%8F%8AKMS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h5 id="Windows-Office-GVLK密钥"><a href="#Windows-Office-GVLK密钥" class="headerlink" title="Windows/Office GVLK密钥"></a>Windows/Office GVLK密钥</h5><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 操作系统版本   KMS 客户端安装密钥</span><br><span class="line">## 其他版本请在 https:&#x2F;&#x2F;docs.microsoft.com&#x2F;zh-cn&#x2F;windows-server&#x2F;get-started&#x2F;kmsclientkeys 自行查找</span><br><span class="line">Windows 7 专业版   FJ82H-XT6CR-J8D7P-XQJJ2-GPDD4</span><br><span class="line">Windows 8 专业版   NG4HW-VH26C-733KW-K6F98-J8CK4</span><br><span class="line">Windows 8.1 专业版 GCRJD-8NW9H-F2CDX-CCM8D-9D6T9</span><br><span class="line">Windows 10 专业版  W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br><span class="line"></span><br><span class="line">## OFFICE 版本   KMS 客户端安装密钥</span><br><span class="line">## 其他版本请在 https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;DeployOffice&#x2F;vlactivation&#x2F;gvlks 自行查找</span><br><span class="line">Office Professional Plus 2019      NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP </span><br><span class="line">Office Standard 2019               6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK </span><br><span class="line">Project Professional 2019          B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B</span><br><span class="line">Project Standard 2019              C4F7P-NCP8C-6CQPT-MQHV9-JXD2M</span><br><span class="line">Visio Professional 2019            9BGNQ-K37YR-RQHF2-38RQ3-7VCBB </span><br><span class="line">Visio Standard 2019                7TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2</span><br><span class="line"></span><br><span class="line">Office Professional Plus 2016      XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99 </span><br><span class="line">Office  Standard 2016              JNRGM-WHDWX-FJJG3-K47QV-DRTFM </span><br><span class="line">Project  Professional 2016         YG9NW-3K39V-2T3HJ-93F3Q-G83KT </span><br><span class="line">Project  Standard 2016             GNFHQ-F6YQM-KQDGJ-327XX-KQBVC </span><br><span class="line">Visio  Professional 2016           PD3PC-RHNGV-FXJ29-8JK7D-RJRJK </span><br><span class="line">Visio  Standard 2016               7WHWN-4T7MP-G96JF-G33KR-W8GF4 </span><br></pre></td></tr></table></figure>
<h5 id="KMS-使用。使用管理员权限打开-cmd-命令行。"><a href="#KMS-使用。使用管理员权限打开-cmd-命令行。" class="headerlink" title="KMS 使用。使用管理员权限打开 cmd 命令行。"></a>KMS 使用。使用管理员权限打开 cmd 命令行。</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 查看系统激活状态</span><br><span class="line">slmgr.vbs -xpr</span><br><span class="line">## 查看系统激活状态详细信息</span><br><span class="line">slmgr.vbs -dlv</span><br><span class="line">## 卸载密钥</span><br><span class="line">slmgr.vbs &#x2F;upk</span><br><span class="line">## 查看系统版本</span><br><span class="line">wmic os get caption</span><br><span class="line">## 安装密钥，需要使用对应系统版本的激活密钥（GVLK）</span><br><span class="line">slmgr &#x2F;ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br><span class="line">## 设置激活 KMS 服务器</span><br><span class="line">slmgr &#x2F;skms ip</span><br><span class="line">## 激活系统</span><br><span class="line">slmgr &#x2F;ato</span><br></pre></td></tr></table></figure>
<h5 id="使用-KMS-激活-OFFICE"><a href="#使用-KMS-激活-OFFICE" class="headerlink" title="使用 KMS 激活 OFFICE"></a>使用 KMS 激活 OFFICE</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 切换至 office 安装目录（依据个人安装路径）</span><br><span class="line">cd &quot;C:\Program Files\Microsoft Office\Office16&quot;</span><br><span class="line">## 安装 Office GVLK 激活密钥</span><br><span class="line">cscript ospp.vbs &#x2F;inpkey: XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99</span><br><span class="line">## 执行注册 KMS 服务器</span><br><span class="line">cscript ospp.vbs &#x2F;sethst:ip</span><br><span class="line">## 激活 OFFICE</span><br><span class="line">cscript ospp.vbs &#x2F;act</span><br></pre></td></tr></table></figure>
<h5 id="KMS-服务器安装方法"><a href="#KMS-服务器安装方法" class="headerlink" title="KMS 服务器安装方法"></a>KMS 服务器安装方法</h5><p>KMS 服务器安装的前提是需要自己有一台虚拟机或者服务器，参考 Github 上开源的一键部署方案安装,省时省力：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 下载一键安装及管理程序</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;dakkidaze&#x2F;one-key-kms.git</span><br><span class="line">cd one-key-kms</span><br><span class="line">## CentOS &#x2F; Redhat &#x2F; Fedora</span><br><span class="line">sudo sh one-key-kms-centos.sh</span><br><span class="line">## Debian &#x2F; Ubuntu &#x2F; Mint</span><br><span class="line">sudo sh one-key-kms-debian.sh</span><br><span class="line">## 管理程序 start&#x2F;stop&#x2F;restart&#x2F;status</span><br><span class="line">.&#x2F;kms.sh start</span><br></pre></td></tr></table></figure>
<h5 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>kms</tag>
      </tags>
  </entry>
  <entry>
    <title>WINDOWS下的MYSQL安装与卸载</title>
    <url>/2019/11/21/WINDOWS%E4%B8%8B%E7%9A%84MYSQL%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/</url>
    <content><![CDATA[<h5 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h5><p>以管理员身份运行cmd，进入mysql-5.7.24-winx64\bin目录下，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld install</span><br></pre></td></tr></table></figure>
<p>发现很容易就提示服务为安装成功了。</p>
<a id="more"></a>

<p>创建data目录</p>
<p>启动mysql，发现mysql 没有启动起来.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start mysql </span><br></pre></td></tr></table></figure>
<p>到data目录下，查看日志，找到xxx.err，密码在里面</p>
<p>初始化数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld  --initialize</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set password for root@localhost &#x3D; password(&#39;yihai123&#39;);</span><br></pre></td></tr></table></figure>
<p>注意：一定要先flush privileges，再set，不然会报错，再启动mysql<br>data目录下，会有三个目录生成，此时启动mysql，发现启动成功了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u  root -p</span><br></pre></td></tr></table></figure>

<h5 id="远程登录："><a href="#远程登录：" class="headerlink" title="远程登录："></a>远程登录：</h5><p>进入mysql,执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;yihai123&#39; WITH GRANT OPTION；</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
<h5 id="来源"><a href="#来源" class="headerlink" title="来源"></a><a href="https://www.cnblogs.com/liongong/p/9901162.htm">来源</a></h5>]]></content>
      <categories>
        <category>开发总结</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>历史流程实例表的id和流程实例id始终是一样</title>
    <url>/2019/11/21/%E5%8E%86%E5%8F%B2%E6%B5%81%E7%A8%8B%E5%AE%9E%E4%BE%8B%E8%A1%A8%E7%9A%84id%E5%92%8C%E6%B5%81%E7%A8%8B%E5%AE%9E%E4%BE%8Bid%E5%A7%8B%E7%BB%88%E6%98%AF%E4%B8%80%E6%A0%B7/</url>
    <content><![CDATA[<h5 id="历史流程实例表的id和流程实例id始终是一样"><a href="#历史流程实例表的id和流程实例id始终是一样" class="headerlink" title="历史流程实例表的id和流程实例id始终是一样"></a>历史流程实例表的id和流程实例id始终是一样</h5><hr>
<p>历史流程实例表的id和流程实例id始终是一样的。所以Activiti没有提供获取流程实例id的接口；因为直接getId()获取的值和流程实例Id是一样的；</p>
<a id="more"></a>

<h5 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void getHistoryProcessInstance()&#123;</span><br><span class="line">    HistoricProcessInstance hpi&#x3D; processEngine.getHistoryService() &#x2F;&#x2F; 历史任务Service</span><br><span class="line">    .createHistoricProcessInstanceQuery() &#x2F;&#x2F; 创建历史流程实例查询</span><br><span class="line">    .processInstanceId(&quot;2501&quot;) &#x2F;&#x2F; 指定流程实例ID</span><br><span class="line">     .singleResult();</span><br><span class="line">    System.out.println(&quot;流程实例ID:&quot;+hpi.getId());</span><br><span class="line">    System.out.println(&quot;创建时间：&quot;+hpi.getStartTime());</span><br><span class="line">    System.out.println(&quot;结束时间：&quot;+hpi.getEndTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发总结</category>
      </categories>
      <tags>
        <tag>activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>在本地用命令行创建一个git仓库，并推送到远程</title>
    <url>/2019/04/14/%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAgit%E4%BB%93%E5%BA%93%EF%BC%8C%E5%B9%B6%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B/</url>
    <content><![CDATA[<h5 id="首先，进入项目目录下（没有的话自己创建一个）"><a href="#首先，进入项目目录下（没有的话自己创建一个）" class="headerlink" title="首先，进入项目目录下（没有的话自己创建一个）"></a>首先，进入项目目录下（没有的话自己创建一个）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd funeral_import</span><br></pre></td></tr></table></figure>
<h5 id="在funeral-import目录下-初始化一个git仓库"><a href="#在funeral-import目录下-初始化一个git仓库" class="headerlink" title="在funeral_import目录下 初始化一个git仓库"></a>在funeral_import目录下 初始化一个git仓库</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init </span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h5 id="复制一个文件到funeral-import目录下，然后执行git-add-，将“修改”从当前工作区存放到暂存区"><a href="#复制一个文件到funeral-import目录下，然后执行git-add-，将“修改”从当前工作区存放到暂存区" class="headerlink" title="复制一个文件到funeral_import目录下，然后执行git add .，将“修改”从当前工作区存放到暂存区"></a>复制一个文件到funeral_import目录下，然后执行git add .，将“修改”从当前工作区存放到暂存区</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<h5 id="将暂存区中存放的文件提交到git仓库"><a href="#将暂存区中存放的文件提交到git仓库" class="headerlink" title="将暂存区中存放的文件提交到git仓库"></a>将暂存区中存放的文件提交到git仓库</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure>
<h5 id="在远端新建一个git代码库：funeral-import，将本地代码库的当前分支与远程的代码库相关联"><a href="#在远端新建一个git代码库：funeral-import，将本地代码库的当前分支与远程的代码库相关联" class="headerlink" title="在远端新建一个git代码库：funeral_import，将本地代码库的当前分支与远程的代码库相关联"></a>在远端新建一个git代码库：funeral_import，将本地代码库的当前分支与远程的代码库相关联</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin http:&#x2F;&#x2F;xxxxx&#x2F;administrator&#x2F;funeral_import.git</span><br></pre></td></tr></table></figure>
<h5 id="设置仓库属性，刚开发者用户加入到仓库中"><a href="#设置仓库属性，刚开发者用户加入到仓库中" class="headerlink" title="设置仓库属性，刚开发者用户加入到仓库中"></a>设置仓库属性，刚开发者用户加入到仓库中</h5><h5 id="将本地代码库的当前分支推送到远程的代码库"><a href="#将本地代码库的当前分支推送到远程的代码库" class="headerlink" title="将本地代码库的当前分支推送到远程的代码库"></a>将本地代码库的当前分支推送到远程的代码库</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h5 id="另：命令补充！查看git仓库的远程代码库的地址：git-remote-v"><a href="#另：命令补充！查看git仓库的远程代码库的地址：git-remote-v" class="headerlink" title="另：命令补充！查看git仓库的远程代码库的地址：git remote -v"></a>另：命令补充！查看git仓库的远程代码库的地址：git remote -v</h5>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>对json数据key进行替换</title>
    <url>/2021/01/25/%E5%AF%B9json%E6%95%B0%E6%8D%AEkey%E8%BF%9B%E8%A1%8C%E6%9B%BF%E6%8D%A2/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author hailou</span><br><span class="line"> * @Description 对json数据key进行替换</span><br><span class="line"> * @Date on 2020&#x2F;9&#x2F;15 17:19</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONArray;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class JSONUtil &#123;</span><br><span class="line"></span><br><span class="line">    public static JSONObject changeJsonObj(JSONObject jsonObj,Map&lt;String, String&gt; keyMap) &#123;</span><br><span class="line">        JSONObject resJson &#x3D; new JSONObject();</span><br><span class="line">        Set&lt;String&gt; keySet &#x3D; jsonObj.keySet();</span><br><span class="line">        for (String key : keySet) &#123;</span><br><span class="line">            String resKey &#x3D; keyMap.get(key) &#x3D;&#x3D; null ? key : keyMap.get(key);</span><br><span class="line">            try &#123;</span><br><span class="line">                JSONObject jsonobj1 &#x3D; jsonObj.getJSONObject(key);</span><br><span class="line">                resJson.put(resKey, changeJsonObj(jsonobj1, keyMap));</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    JSONArray jsonArr &#x3D; jsonObj.getJSONArray(key);</span><br><span class="line">                    resJson.put(resKey, changeJsonArr(jsonArr, keyMap));</span><br><span class="line">                &#125; catch (Exception x) &#123;</span><br><span class="line">                    resJson.put(resKey, jsonObj.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return resJson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static JSONArray changeJsonArr(JSONArray jsonArr,Map&lt;String, String&gt; keyMap) &#123;</span><br><span class="line">        JSONArray resJson &#x3D; new JSONArray();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; jsonArr.size(); i++) &#123;</span><br><span class="line">            JSONObject jsonObj &#x3D; jsonArr.getJSONObject(i);</span><br><span class="line">            resJson.add(changeJsonObj(jsonObj, keyMap));</span><br><span class="line">        &#125;</span><br><span class="line">        return resJson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String jsonStr &#x3D; &quot;&#123;\&quot;user\&quot;:&#123;\&quot;name\&quot;:\&quot;张三\&quot;,\&quot;sex\&quot;:\&quot;男\&quot;,\&quot;hobby\&quot;:[&#123;\&quot;motion\&quot;:\&quot;足球\&quot;,\&quot;desc\&quot;:\&quot;任性\&quot;&#125;,&#123;\&quot;game\&quot;:\&quot;英雄联盟\&quot;,\&quot;desc\&quot;:\&quot;就是这么任性\&quot;&#125;]&#125;&#125;&quot;;</span><br><span class="line">        Map&lt;String, String&gt; keyMap &#x3D; new HashMap&lt;String, String&gt;();</span><br><span class="line">        keyMap.put(&quot;name&quot;, &quot;XingMing&quot;);</span><br><span class="line">        keyMap.put(&quot;user&quot;, &quot;YongHu&quot;);</span><br><span class="line">        keyMap.put(&quot;desc&quot;, &quot;MiaoShu&quot;);</span><br><span class="line">        JSONObject jsonObj &#x3D; JSONUtil.changeJsonObj(JSONObject.parseObject(jsonStr),keyMap);</span><br><span class="line">        System.out.println(&quot;换值结果 》》 &quot; + jsonObj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>递归处理JSON</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>安装nginx，keeplived，实现双机热备</title>
    <url>/2019/11/22/%E5%AE%89%E8%A3%85nginx%EF%BC%8Ckeeplived%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/</url>
    <content><![CDATA[<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>详见《linux安装nginx 配置https》</p>
<h3 id="安装keepalived"><a href="#安装keepalived" class="headerlink" title="安装keepalived"></a>安装keepalived</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y keepalived</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h6 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">	## keepalived 自带的邮件提醒需要开启 sendmail 服务。 建议用独立的监控或第三方 SMTP</span><br><span class="line">	router_id hailoupc ## 标识本节点的字条串，通常为 hostname</span><br><span class="line">&#125; </span><br><span class="line">## keepalived 会定时执行脚本并对脚本执行的结果进行分析，动态调整 vrrp_instance 的优先级。如果脚本执行结果为 0，并且 weight 配置的值大于 0，则优先级相应的增加。如果脚本执行结果非 0，并且 weight配置的值小于 0，则优先级相应的减少。其他情况，维持原本配置的优先级，即配置文件中 priority 对应的值。</span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">	script &quot;&#x2F;etc&#x2F;keepalived&#x2F;nginx_check.sh&quot; ## 检测 nginx 状态的脚本路径</span><br><span class="line">	interval 2 ## 检测时间间隔</span><br><span class="line">	weight -20 ## 如果条件成立，权重-20</span><br><span class="line">&#125;</span><br><span class="line">## 定义虚拟路由， VI_1 为虚拟路由的标示符，自己定义名称</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">	state MASTER ## 主节点为 MASTER， 对应的备份节点为 BACKUP</span><br><span class="line">	interface enp0s3 ## 绑定虚拟 IP 的网络接口，与本机 IP 地址所在的网络接口相同， 我的是 eth0</span><br><span class="line">	virtual_router_id 33 ## 虚拟路由的 ID 号， 两个节点设置必须一样， 可选 IP 最后一段使用, 相同的 VRID 为一个组，他将决定多播的 MAC 地址</span><br><span class="line">	mcast_src_ip 192.168.199.185 ## 本机 IP 地址</span><br><span class="line">	priority 100 ## 节点优先级， 值范围 0-254， MASTER 要比 BACKUP 高</span><br><span class="line">	nopreempt ## 优先级高的设置 nopreempt 解决异常恢复后再次抢占的问题</span><br><span class="line">	advert_int 1 ## 组播信息发送间隔，两个节点设置必须一样， 默认 1s</span><br><span class="line">	## 设置验证信息，两个节点必须一致</span><br><span class="line">	authentication &#123;</span><br><span class="line">		auth_type PASS</span><br><span class="line">		auth_pass 1111 ## 真实生产，按需求对应该过来</span><br><span class="line">	&#125;</span><br><span class="line">	## 将 track_script 块加入 instance 配置块</span><br><span class="line">	track_script &#123;</span><br><span class="line">		chk_nginx ## 执行 Nginx 监控的服务</span><br><span class="line">	&#125; #</span><br><span class="line">	# 虚拟 IP 池, 两个节点设置必须一样</span><br><span class="line">	virtual_ipaddress &#123;</span><br><span class="line">		192.168.199.130 ## 虚拟 ip，可以定义多个</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="注意-主存机上面不同的地方改四个：1，state（MASTER-BACKUP）-2-mcast-src-ip-主存机的ip-3-priority-（主机大于从机）4，router-id-（hailoupc自行设置就行，可以两台机子不一样）virtual-ipaddress这个ip一定要是能访问到的虚拟ip，是网段内的一个有效ip，可以不存在但并必须有效"><a href="#注意-主存机上面不同的地方改四个：1，state（MASTER-BACKUP）-2-mcast-src-ip-主存机的ip-3-priority-（主机大于从机）4，router-id-（hailoupc自行设置就行，可以两台机子不一样）virtual-ipaddress这个ip一定要是能访问到的虚拟ip，是网段内的一个有效ip，可以不存在但并必须有效" class="headerlink" title="注意: 主存机上面不同的地方改四个：1，state（MASTER/BACKUP） 2,mcast_src_ip(主存机的ip) 3 priority （主机大于从机）4，router_id （hailoupc自行设置就行，可以两台机子不一样）virtual_ipaddress这个ip一定要是能访问到的虚拟ip，是网段内的一个有效ip，可以不存在但并必须有效"></a>注意: 主存机上面不同的地方改四个：1，state（MASTER/BACKUP） 2,mcast_src_ip(主存机的ip) 3 priority （主机大于从机）4，router_id （hailoupc自行设置就行，可以两台机子不一样）virtual_ipaddress这个ip一定要是能访问到的虚拟ip，是网段内的一个有效ip，可以不存在但并必须有效</h6><h6 id="编写-Nginx-状态检测脚本"><a href="#编写-Nginx-状态检测脚本" class="headerlink" title="编写 Nginx 状态检测脚本"></a>编写 Nginx 状态检测脚本</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;keepalived&#x2F;nginx_check.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">A&#x3D;&#96;ps -C nginx –no-header |wc -l&#96;</span><br><span class="line">if [ $A -eq 0 ];then</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;nginx</span><br><span class="line">sleep 2</span><br><span class="line">if [ &#96;ps -C nginx --no-header |wc -l&#96; -eq 0 ];then</span><br><span class="line">	killall keepalived</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<h6 id="注意-usr-sbin-nginx这个路径要和nginx对应上"><a href="#注意-usr-sbin-nginx这个路径要和nginx对应上" class="headerlink" title="注意/usr/sbin/nginx这个路径要和nginx对应上"></a>注意/usr/sbin/nginx这个路径要和nginx对应上</h6><h6 id="保存后，给脚本赋执行权限："><a href="#保存后，给脚本赋执行权限：" class="headerlink" title="保存后，给脚本赋执行权限："></a>保存后，给脚本赋执行权限：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x &#x2F;etc&#x2F;keepalived&#x2F;nginx_check.sh</span><br></pre></td></tr></table></figure>
<h6 id="启动-Keepalived"><a href="#启动-Keepalived" class="headerlink" title="启动 Keepalived"></a>启动 Keepalived</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service keepalived start</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>keeplived</tag>
      </tags>
  </entry>
  <entry>
    <title>抓取json中的任意节点的数据</title>
    <url>/2021/01/25/%E6%8A%93%E5%8F%96json%E4%B8%AD%E7%9A%84%E4%BB%BB%E6%84%8F%E8%8A%82%E7%82%B9%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h6 id="依赖的jar"><a href="#依赖的jar" class="headerlink" title="依赖的jar"></a>依赖的jar</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>工具类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line">import com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line">import com.fasterxml.jackson.databind.JavaType;</span><br><span class="line">import com.fasterxml.jackson.databind.JsonNode;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.StringWriter;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author hailou</span><br><span class="line"> * @Description</span><br><span class="line"> * @Date on 2020&#x2F;9&#x2F;16 15:57</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class JacksonUtils &#123;</span><br><span class="line"></span><br><span class="line">    private static final ObjectMapper MAPPER &#x3D; new ObjectMapper();</span><br><span class="line">    private static final JacksonUtils CONVERSION &#x3D; new JacksonUtils();</span><br><span class="line">    private static final String SEPARATOR &#x3D; &quot;\\.&quot;;</span><br><span class="line"></span><br><span class="line">    private JacksonUtils() &#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void init() &#123;</span><br><span class="line">        SimpleDateFormat dateFormat &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX&quot;);</span><br><span class="line">        MAPPER.setDateFormat(dateFormat);</span><br><span class="line">        MAPPER.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static JacksonUtils getInstance() &#123;</span><br><span class="line">        return CONVERSION;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String pojo2Json(Object obj) throws IOException &#123;</span><br><span class="line">        StringWriter writer &#x3D; new StringWriter();</span><br><span class="line">        MAPPER.writeValue(writer, obj);</span><br><span class="line"></span><br><span class="line">        return writer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; T json2Pojo(InputStream jsonStream, Class&lt;T&gt; classType) throws IOException &#123;</span><br><span class="line">        T t &#x3D; null;</span><br><span class="line"></span><br><span class="line">        try (InputStream inputStream &#x3D; jsonStream) &#123;</span><br><span class="line">            t &#x3D; MAPPER.readValue(inputStream, classType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; T json2Pojo(String json, Class&lt;T&gt; classType) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return MAPPER.readValue(json, classType);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 将JSON转化为List</span><br><span class="line">     *</span><br><span class="line">     * @param json 字符串</span><br><span class="line">     * @param elementClasses 元素类</span><br><span class="line">     * @return List 转换后的对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static List&lt;?&gt; jsonConverList(String json, Class&lt;?&gt;... elementClasses) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return MAPPER.readValue(json, getCollectionType(List.class, elementClasses));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取泛型的Collection Type</span><br><span class="line">     *</span><br><span class="line">     * @param collectionClass 泛型的Collection</span><br><span class="line">     * @param elementClasses 元素类</span><br><span class="line">     * @return JavaType Java类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static JavaType getCollectionType(Class&lt;?&gt; collectionClass, Class&lt;?&gt;... elementClasses) &#123;</span><br><span class="line">        return MAPPER.getTypeFactory().constructParametricType(collectionClass, elementClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; T map2Pojo(Map&lt;String, Object&gt; map, Class&lt;T&gt; classType) throws IOException &#123;</span><br><span class="line">        return MAPPER.convertValue(map, classType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; T jsonParse(String json) throws IOException &#123;</span><br><span class="line">        return MAPPER.readValue(json, new TypeReference&lt;T&gt;() &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * path: Like xpath, to find the specific value via path. Use :(Colon) to separate different key</span><br><span class="line">     * name or index. For example: JSON content: &#123; &quot;name&quot;: &quot;One Guy&quot;, &quot;details&quot;: [</span><br><span class="line">     * &#123;&quot;education_first&quot;: &quot;xx school&quot;&#125;, &#123;&quot;education_second&quot;: &quot;yy school&quot;&#125;, &#123;&quot;education_third&quot;:</span><br><span class="line">     * &quot;zz school&quot;&#125;, ... ] &#125;</span><br><span class="line">     *</span><br><span class="line">     * To find the value of &quot;education_second&quot;, the path&#x3D;&quot;details:1:education_second&quot;.</span><br><span class="line">     *</span><br><span class="line">     * @param json</span><br><span class="line">     * @param path</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String fetchValue(String json, String path) &#123;</span><br><span class="line">        JsonNode tempNode &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            JsonNode jsonNode &#x3D; MAPPER.readTree(json);</span><br><span class="line">            tempNode &#x3D; jsonNode;</span><br><span class="line">            String[] paths &#x3D; path.split(SEPARATOR);</span><br><span class="line"></span><br><span class="line">            for (String fieldName : paths) &#123;</span><br><span class="line">                if (tempNode.isArray()) &#123;</span><br><span class="line">                    tempNode &#x3D; fetchValueFromArray(tempNode, fieldName);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    tempNode &#x3D; fetchValueFromObject(tempNode, fieldName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (tempNode !&#x3D; null) &#123;</span><br><span class="line">            String value &#x3D; tempNode.asText();</span><br><span class="line"></span><br><span class="line">            if (value &#x3D;&#x3D; null || value.isEmpty()) &#123;</span><br><span class="line">                value &#x3D; tempNode.toString();</span><br><span class="line">            &#125;</span><br><span class="line">            return value;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private JsonNode fetchValueFromObject(JsonNode jsonNode, String fieldName) &#123;</span><br><span class="line">        return jsonNode.get(fieldName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static List&lt;String&gt; restList;</span><br><span class="line"></span><br><span class="line">    private JsonNode fetchValueFromArray(JsonNode jsonNode, String index) &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            return jsonNode.get(Integer.parseInt(index));</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            restList &#x3D; jsonNode.findValuesAsText(index) ;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;return jsonNode.get(Integer.parseInt(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public JsonNode convertStr2JsonNode(String json) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return MAPPER.readTree(json);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String aa &#x3D; &quot;&#123;\n&quot; +</span><br><span class="line">                &quot;\t\&quot;org\&quot;: &#123;\n&quot; +</span><br><span class="line">                &quot;\t\t\&quot;id\&quot;: [\&quot;aa\&quot;, \&quot;bb\&quot;],\n&quot; +</span><br><span class="line">                &quot;\t\t\&quot;name\&quot;: \&quot;机构树\&quot;,\n&quot; +</span><br><span class="line">                &quot;\t\t\&quot;children\&quot;: [&#123;\n&quot; +</span><br><span class="line">                &quot;\t\t\t\&quot;name\&quot;: \&quot;信息办\&quot;,\n&quot; +</span><br><span class="line">                &quot;\t\t\t\&quot;children\&quot;: [&#123;\n&quot; +</span><br><span class="line">                &quot;\t\t\t\t\&quot;name\&quot;: \&quot;网站组\&quot;,\n&quot; +</span><br><span class="line">                &quot;\t\t\t\t\&quot;age\&quot;: \&quot;24\&quot;\n&quot; +</span><br><span class="line">                &quot;\t\t\t&#125;, &#123;\n&quot; +</span><br><span class="line">                &quot;\t\t\t\t\&quot;name\&quot;: \&quot;OA组\&quot;,\n&quot; +</span><br><span class="line">                &quot;\t\t\t\t\&quot;age\&quot;: \&quot;24\&quot;\n&quot; +</span><br><span class="line">                &quot;\t\t\t&#125;]\n&quot; +</span><br><span class="line">                &quot;\t\t&#125;, &#123;\n&quot; +</span><br><span class="line">                &quot;\t\t\t\&quot;name\&quot;: \&quot;造林司\&quot;,\n&quot; +</span><br><span class="line">                &quot;\t\t\t\&quot;children\&quot;: [&#123;\n&quot; +</span><br><span class="line">                &quot;\t\t\t\t\&quot;name\&quot;: \&quot;植树组\&quot;\n&quot; +</span><br><span class="line">                &quot;\t\t\t&#125;, &#123;\n&quot; +</span><br><span class="line">                &quot;\t\t\t\t\&quot;name\&quot;: \&quot;退根组\&quot;\n&quot; +</span><br><span class="line">                &quot;\t\t\t&#125;]\n&quot; +</span><br><span class="line">                &quot;\t\t&#125;]\n&quot; +</span><br><span class="line">                &quot;\t&#125;\n&quot; +</span><br><span class="line">                &quot;&#125;&quot;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;String res &#x3D; JacksonUtils.getInstance().fetchValue(aa, &quot;org:children:0:children:1&quot;);</span><br><span class="line">        String res &#x3D; JacksonUtils.getInstance().fetchValue(aa, &quot;org.children&quot;);</span><br><span class="line">        &#x2F;&#x2F;String res &#x3D; JacksonUtils.getInstance().fetchValue(aa, &quot;org.id&quot;);</span><br><span class="line">        System.out.println(&quot;res &#x3D; &quot; + res);</span><br><span class="line">        System.out.println(&quot;restList &#x3D; &quot; + restList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>递归处理JSON</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传（一）XMLHttpRequest文件在前端页面压缩并上传</title>
    <url>/2019/12/19/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%88%E4%B8%80%EF%BC%89XMLHttpRequest%E6%96%87%E4%BB%B6%E5%9C%A8%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%8E%8B%E7%BC%A9%E5%B9%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>代码如下</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">	&lt;title&gt;XMLHttpRequest上传文件&lt;&#x2F;title&gt;	</span><br><span class="line">	&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">		&#x2F;*</span><br><span class="line">        三个参数</span><br><span class="line">        file：一个是文件(类型是图片格式)，</span><br><span class="line">        w：一个是文件压缩的后宽度，宽度越小，字节越小</span><br><span class="line">        objDiv：一个是容器或者回调函数</span><br><span class="line">        photoCompress()</span><br><span class="line">         *&#x2F;</span><br><span class="line">		function photoCompress(file,w,objDiv)&#123;</span><br><span class="line">			var ready&#x3D;new FileReader();</span><br><span class="line">			&#x2F;*开始读取指定的Blob对象或File对象中的内容. 当读取操作完成时,readyState属性的值会成为DONE,如果设置了onloadend事件处理程序,则调用之.同时,result属性中将包含一个data: URL格式的字符串以表示所读取文件的内容.*&#x2F;</span><br><span class="line">			ready.readAsDataURL(file);</span><br><span class="line">			ready.onload&#x3D;function()&#123;</span><br><span class="line">				var re&#x3D;this.result;</span><br><span class="line">				canvasDataURL(re,w,objDiv)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		function canvasDataURL(path, obj, callback)&#123;</span><br><span class="line">			var img &#x3D; new Image();</span><br><span class="line">			img.src &#x3D; path;</span><br><span class="line">			img.onload &#x3D; function()&#123;</span><br><span class="line">				var that &#x3D; this;</span><br><span class="line">				&#x2F;&#x2F; 默认按比例压缩</span><br><span class="line">				var w &#x3D; that.width,</span><br><span class="line">						h &#x3D; that.height,</span><br><span class="line">						scale &#x3D; w &#x2F; h;</span><br><span class="line">				w &#x3D; obj.width || w;</span><br><span class="line">				h &#x3D; obj.height || (w &#x2F; scale);</span><br><span class="line">				var quality &#x3D; 0.7;  &#x2F;&#x2F; 默认图片质量为0.7</span><br><span class="line">				&#x2F;&#x2F;生成canvas</span><br><span class="line">				var canvas &#x3D; document.createElement(&#39;canvas&#39;);</span><br><span class="line">				var ctx &#x3D; canvas.getContext(&#39;2d&#39;);</span><br><span class="line">				&#x2F;&#x2F; 创建属性节点</span><br><span class="line">				var anw &#x3D; document.createAttribute(&quot;width&quot;);</span><br><span class="line">				anw.nodeValue &#x3D; w;</span><br><span class="line">				var anh &#x3D; document.createAttribute(&quot;height&quot;);</span><br><span class="line">				anh.nodeValue &#x3D; h;</span><br><span class="line">				canvas.setAttributeNode(anw);</span><br><span class="line">				canvas.setAttributeNode(anh);</span><br><span class="line">				ctx.drawImage(that, 0, 0, w, h);</span><br><span class="line">				&#x2F;&#x2F; 图像质量</span><br><span class="line">				if(obj.quality &amp;&amp; obj.quality &lt;&#x3D; 1 &amp;&amp; obj.quality &gt; 0)&#123;</span><br><span class="line">					quality &#x3D; obj.quality;</span><br><span class="line">				&#125;</span><br><span class="line">				&#x2F;&#x2F; quality值越小，所绘制出的图像越模糊</span><br><span class="line">				var base64 &#x3D; canvas.toDataURL(&#39;image&#x2F;jpeg&#39;, quality);</span><br><span class="line">				&#x2F;&#x2F; 回调函数返回base64的值</span><br><span class="line">				callback(base64);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;**</span><br><span class="line">		 * 将以base64的图片url数据转换为Blob</span><br><span class="line">		 * @param urlData</span><br><span class="line">		 *            用url方式表示的base64图片数据</span><br><span class="line">		 *&#x2F;</span><br><span class="line">		function convertBase64UrlToBlob(urlData)&#123;</span><br><span class="line">			var arr &#x3D; urlData.split(&#39;,&#39;), mime &#x3D; arr[0].match(&#x2F;:(.*?);&#x2F;)[1],</span><br><span class="line">					bstr &#x3D; atob(arr[1]), n &#x3D; bstr.length, u8arr &#x3D; new Uint8Array(n);</span><br><span class="line">			while(n--)&#123;</span><br><span class="line">				u8arr[n] &#x3D; bstr.charCodeAt(n);</span><br><span class="line">			&#125;</span><br><span class="line">			return new Blob([u8arr], &#123;type:mime&#125;);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		var xhr;</span><br><span class="line">		&#x2F;&#x2F;上传文件方法</span><br><span class="line">		function UpladFile() &#123;</span><br><span class="line">			var fileObj &#x3D; document.getElementById(&quot;file&quot;).files[0]; &#x2F;&#x2F; js 获取文件对象</span><br><span class="line">			if(fileObj.size&#x2F;1024 &gt; 1025*100)&#123;&#x2F;&#x2F; 大于100M不让上传</span><br><span class="line">				alert(&quot;文件已超出系统100M接受大小！&quot;);</span><br><span class="line">				return;</span><br><span class="line">			&#125;</span><br><span class="line">			var url &#x3D; &quot;&#x2F;common&#x2F;upload&quot;; &#x2F;&#x2F; 接收上传文件的后台地址</span><br><span class="line">			var form &#x3D; new FormData(); &#x2F;&#x2F; FormData 对象</span><br><span class="line">			&#x2F;&#x2F;表单对象可自行添加要发送的参数例如form.append(&quot;age&quot;10) 则后台可接收到age&#x3D;10的参数</span><br><span class="line">			var index &#x3D; fileObj.name.lastIndexOf(&quot;.&quot;);</span><br><span class="line">			var suffix &#x3D; fileObj.name.substr(index+1).toUpperCase();</span><br><span class="line">			if((fileObj.size&#x2F;1024 &gt; 1025 ) &amp;&amp; (suffix&#x3D;&#x3D;&quot;BMP&quot;||suffix&#x3D;&#x3D;&quot;JPG&quot;||suffix&#x3D;&#x3D;&quot;JPEG&quot;||suffix&#x3D;&#x3D;&quot;PNG&quot;||suffix&#x3D;&#x3D;&quot;GIF&quot;)) &#123; &#x2F;&#x2F;大于1M,并且是图片类，进行压缩上传</span><br><span class="line">				if(fileObj.size&#x2F;1024 &gt; 1025*20)&#123;&#x2F;&#x2F; 大于20M不让上传</span><br><span class="line">					alert(&quot;图片已超出系统20M接受大小！&quot;);</span><br><span class="line">					return;</span><br><span class="line">				&#125;</span><br><span class="line">				var startTime &#x3D; new Date(); &#x2F;&#x2F; 结束时间</span><br><span class="line">				console.info(&quot;文件大小为：&quot;+fileObj.size&#x2F;(1024*1024)+&quot;M,压缩中...&quot;);</span><br><span class="line">				photoCompress(fileObj, &#123;</span><br><span class="line">					quality: 0.2</span><br><span class="line">				&#125;, function(base64Codes)&#123;</span><br><span class="line">					var endTime &#x3D; new Date(); &#x2F;&#x2F; 结束时间</span><br><span class="line">					console.info(&quot;文件压缩后大小为：&quot;+base64Codes.length&#x2F;(1024*1024)+&quot;M,用时&quot;+(endTime - startTime)+&quot;毫秒,开始上传！&quot;);</span><br><span class="line">					var bl &#x3D; convertBase64UrlToBlob(base64Codes);</span><br><span class="line">					&#x2F;&#x2F;直接向FormData对象中添加File或Blob，就像下面这样：</span><br><span class="line">					form.append(&quot;file&quot;, bl, &quot;file_&quot;+Date.parse(new Date())+&quot;.jpg&quot;); &#x2F;&#x2F; 文件对象</span><br><span class="line">					xhr &#x3D; new XMLHttpRequest();  &#x2F;&#x2F; XMLHttpRequest 对象</span><br><span class="line">					xhr.open(&quot;post&quot;, url, true); &#x2F;&#x2F;post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。</span><br><span class="line">					xhr.onload &#x3D; uploadComplete; &#x2F;&#x2F;请求完成</span><br><span class="line">					xhr.onerror &#x3D;  uploadFailed; &#x2F;&#x2F;请求失败</span><br><span class="line"></span><br><span class="line">					xhr.upload.onprogress &#x3D; progressFunction;&#x2F;&#x2F;【上传进度调用方法实现】</span><br><span class="line">					xhr.upload.onloadstart &#x3D; function()&#123;&#x2F;&#x2F;上传开始执行方法</span><br><span class="line">						ot &#x3D; new Date().getTime();   &#x2F;&#x2F;设置上传开始时间</span><br><span class="line">						oloaded &#x3D; 0;&#x2F;&#x2F;设置上传开始时，以上传的文件大小为0</span><br><span class="line">					&#125;;</span><br><span class="line"></span><br><span class="line">					xhr.send(form); &#x2F;&#x2F;开始上传，发送form数据</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;else&#123; &#x2F;&#x2F;小于等于1M 原图上传</span><br><span class="line">				form.append(&quot;file&quot;, fileObj); &#x2F;&#x2F; 文件对象</span><br><span class="line">				xhr &#x3D; new XMLHttpRequest();  &#x2F;&#x2F; XMLHttpRequest 对象</span><br><span class="line">				xhr.open(&quot;post&quot;, url, true); &#x2F;&#x2F;post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。</span><br><span class="line">				xhr.onload &#x3D; uploadComplete; &#x2F;&#x2F;请求完成</span><br><span class="line">				xhr.onerror &#x3D;  uploadFailed; &#x2F;&#x2F;请求失败</span><br><span class="line"></span><br><span class="line">				xhr.upload.onprogress &#x3D; progressFunction;&#x2F;&#x2F;【上传进度调用方法实现】</span><br><span class="line">				xhr.upload.onloadstart &#x3D; function()&#123;&#x2F;&#x2F;上传开始执行方法</span><br><span class="line">					ot &#x3D; new Date().getTime();   &#x2F;&#x2F;设置上传开始时间</span><br><span class="line">					oloaded &#x3D; 0;&#x2F;&#x2F;设置上传开始时，以上传的文件大小为0</span><br><span class="line">				&#125;;</span><br><span class="line"></span><br><span class="line">				xhr.send(form); &#x2F;&#x2F;开始上传，发送form数据</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;上传成功响应</span><br><span class="line">		function uploadComplete(evt) &#123;</span><br><span class="line">			&#x2F;&#x2F;服务断接收完文件返回的结果</span><br><span class="line">			console.info(&#39;evt&#x3D;&#39;+JSON.stringify(evt));</span><br><span class="line">			var data &#x3D; JSON.parse(evt.target.responseText);</span><br><span class="line">			&#x2F;&#x2F;根据自己服务器返回的参数进行判断，可自定success 或者data.code &#x3D; 200 以自己返回的字段为准</span><br><span class="line">			console.info(&#39;data&#x3D;&#39;+JSON.stringify(data));</span><br><span class="line">			if(data.code&#x3D;&#x3D;0) &#123;</span><br><span class="line">				alert(&quot;上传成功！&quot;);</span><br><span class="line">			&#125;else&#123;</span><br><span class="line">				alert(&quot;上传失败！&quot;);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;上传失败</span><br><span class="line">		function uploadFailed(evt) &#123;</span><br><span class="line">			console.info(evt);</span><br><span class="line">			alert(&quot;上传失败！!!&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;取消上传</span><br><span class="line">		function cancleUploadFile()&#123;</span><br><span class="line">			xhr.abort();</span><br><span class="line">			console.info(&quot;取消方法被调用&quot;);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;上传进度实现方法，上传过程中会频繁调用该方法</span><br><span class="line">		function progressFunction(evt) &#123;</span><br><span class="line">			var progressBar &#x3D; document.getElementById(&quot;progressBar&quot;);</span><br><span class="line">			var percentageDiv &#x3D; document.getElementById(&quot;percentage&quot;);</span><br><span class="line">			if(progressBar &#x3D;&#x3D;null || percentageDiv&#x3D;&#x3D;null )&#123;</span><br><span class="line">				return;</span><br><span class="line">			&#125;</span><br><span class="line">			&#x2F;&#x2F; event.total是需要传输的总字节，event.loaded是已经传输的字节。如果event.lengthComputable不为真，则event.total等于0</span><br><span class="line">			if (evt.lengthComputable) &#123;&#x2F;&#x2F;</span><br><span class="line">				progressBar.max &#x3D; evt.total;</span><br><span class="line">				progressBar.value &#x3D; evt.loaded;</span><br><span class="line">				percentageDiv.innerHTML &#x3D; Math.round(evt.loaded &#x2F; evt.total * 100) + &quot;%&quot;;</span><br><span class="line">			&#125;</span><br><span class="line">			var time &#x3D; document.getElementById(&quot;time&quot;);</span><br><span class="line">			var nt &#x3D; new Date().getTime();&#x2F;&#x2F;获取当前时间</span><br><span class="line">			var pertime &#x3D; (nt-ot)&#x2F;1000; &#x2F;&#x2F;计算出上次调用该方法时到现在的时间差，单位为s</span><br><span class="line">			ot &#x3D; new Date().getTime(); &#x2F;&#x2F;重新赋值时间，用于下次计算</span><br><span class="line">			var perload &#x3D; evt.loaded - oloaded; &#x2F;&#x2F;计算该分段上传的文件大小，单位b</span><br><span class="line">			oloaded &#x3D; evt.loaded;&#x2F;&#x2F;重新赋值已上传文件大小，用以下次计算</span><br><span class="line">			&#x2F;&#x2F;上传速度计算</span><br><span class="line">			var speed &#x3D; perload&#x2F;pertime;&#x2F;&#x2F;单位b&#x2F;s</span><br><span class="line">			var bspeed &#x3D; speed;</span><br><span class="line">			var units &#x3D; &#39;b&#x2F;s&#39;;&#x2F;&#x2F;单位名称</span><br><span class="line">			if(speed&#x2F;1024&gt;1)&#123;</span><br><span class="line">				speed &#x3D; speed&#x2F;1024;</span><br><span class="line">				units &#x3D; &#39;k&#x2F;s&#39;;</span><br><span class="line">			&#125;</span><br><span class="line">			if(speed&#x2F;1024&gt;1)&#123;</span><br><span class="line">				speed &#x3D; speed&#x2F;1024;</span><br><span class="line">				units &#x3D; &#39;M&#x2F;s&#39;;</span><br><span class="line">			&#125;</span><br><span class="line">			speed &#x3D; speed.toFixed(1);</span><br><span class="line">			&#x2F;&#x2F;剩余时间</span><br><span class="line">			var resttime &#x3D; ((evt.total-evt.loaded)&#x2F;bspeed).toFixed(1);</span><br><span class="line">			time.innerHTML &#x3D; &#39;，速度：&#39;+speed+units+&#39;，剩余时间：&#39;+resttime+&#39;s&#39;;</span><br><span class="line">			if(bspeed&#x3D;&#x3D;0) time.innerHTML &#x3D; &#39;上传已取消&#39;;</span><br><span class="line">		&#125;</span><br><span class="line">	&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;progress id&#x3D;&quot;progressBar&quot; value&#x3D;&quot;0&quot; max&#x3D;&quot;100&quot; style&#x3D;&quot;width: 300px;&quot;&gt;&lt;&#x2F;progress&gt;</span><br><span class="line">&lt;span id&#x3D;&quot;percentage&quot;&gt;&lt;&#x2F;span&gt;&lt;span id&#x3D;&quot;time&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line">&lt;!--图片上传：&lt;input type&#x3D;&quot;file&quot; id&#x3D;&quot;file&quot; name&#x3D;&quot;myfile&quot; accept&#x3D;&quot;image&#x2F;x-png, image&#x2F;jpg, image&#x2F;jpeg, image&#x2F;gif&quot;&#x2F;&gt;&lt;br&#x2F;&gt;--&gt;</span><br><span class="line">文件上传：&lt;input type&#x3D;&quot;file&quot; id&#x3D;&quot;file&quot; name&#x3D;&quot;myfile&quot;  &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&quot;UpladFile()&quot; value&#x3D;&quot;上传&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&quot;cancleUploadFile()&quot; value&#x3D;&quot;取消&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>代码案例</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>js</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传（二）仿京东样式，带前端压缩，带回调函数的上传功能</title>
    <url>/2019/12/20/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BB%BF%E4%BA%AC%E4%B8%9C%E6%A0%B7%E5%BC%8F%EF%BC%8C%E5%B8%A6%E5%89%8D%E7%AB%AF%E5%8E%8B%E7%BC%A9%EF%BC%8C%E5%B8%A6%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>仿京东样式，带前端压缩，带回调函数的上传功能，直接可以运行的代码 </p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh&quot;  &gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        .imageDiv &#123;</span><br><span class="line">            display:inline-block;</span><br><span class="line">            width:160px;</span><br><span class="line">            height:130px;</span><br><span class="line">            -webkit-box-sizing:border-box;</span><br><span class="line">            -moz-box-sizing:border-box;</span><br><span class="line">            box-sizing:border-box;</span><br><span class="line">            border:1px dashed darkgray;</span><br><span class="line">            background:#f8f8f8;</span><br><span class="line">            position:relative;</span><br><span class="line">            overflow:hidden;</span><br><span class="line">            margin:10px</span><br><span class="line">        &#125;</span><br><span class="line">        .cover &#123;</span><br><span class="line">            position:absolute;</span><br><span class="line">            z-index:1;</span><br><span class="line">            top:0;</span><br><span class="line">            left:0;</span><br><span class="line">            width:160px;</span><br><span class="line">            height:130px;</span><br><span class="line">            background-color:rgba(0,0,0,.3);</span><br><span class="line">            display:none;</span><br><span class="line">            line-height:125px;</span><br><span class="line">            text-align:center;</span><br><span class="line">            cursor:pointer;</span><br><span class="line">        &#125;</span><br><span class="line">        .cover .delbtn &#123;</span><br><span class="line">            color:red;</span><br><span class="line">            font-size:20px;</span><br><span class="line">        &#125;</span><br><span class="line">        .imageDiv:hover .cover &#123;</span><br><span class="line">            display:block;</span><br><span class="line">        &#125;</span><br><span class="line">        .addImages &#123;</span><br><span class="line">            display:inline-block;</span><br><span class="line">            width:160px;</span><br><span class="line">            height:130px;</span><br><span class="line">            -webkit-box-sizing:border-box;</span><br><span class="line">            -moz-box-sizing:border-box;</span><br><span class="line">            box-sizing:border-box;</span><br><span class="line">            border:1px dashed darkgray;</span><br><span class="line">            background:#f8f8f8;</span><br><span class="line">            position:relative;</span><br><span class="line">            overflow:hidden;</span><br><span class="line">            margin:10px;</span><br><span class="line">        &#125;</span><br><span class="line">        .text-detail &#123;</span><br><span class="line">            margin-top:40px;</span><br><span class="line">            text-align:center;</span><br><span class="line">        &#125;</span><br><span class="line">        .text-detail span &#123;</span><br><span class="line">            font-size:40px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;body class&#x3D;&quot;white-bg&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;wrapper wrapper-content animated fadeInRight ibox-content&quot;&gt;</span><br><span class="line">    &lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&quot; id&#x3D;&quot;passForm&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot; multipart&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;&lt;span style&#x3D;&quot;color: red&quot;&gt;注：每张照片大写不可超过4M，且最多可以传十张&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;picDiv&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;addImages&quot;&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;file&quot; class&#x3D;&quot;file&quot;</span><br><span class="line">                           multiple</span><br><span class="line">                           accept&#x3D;&quot;image&#x2F;png, image&#x2F;jpeg, image&#x2F;gif, image&#x2F;jpg&quot;</span><br><span class="line">                           style&#x3D;&quot;position:absolute;top:0;left:0;width:160px;height:130px;opacity:0;&quot;&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;text-detail&quot;&gt;</span><br><span class="line">                        &lt;span&gt;+&lt;&#x2F;span&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;hidden&quot; class&#x3D;&quot;img_ids&quot; value&#x3D;&quot;&quot; &gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;apps.bdimg.com&#x2F;libs&#x2F;jquery&#x2F;2.1.4&#x2F;jquery.min.js&quot;  &gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;&#x2F;js&#x2F;ex-upload.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F;图片上传预览功能</span><br><span class="line">    var userAgent &#x3D; navigator.userAgent; &#x2F;&#x2F;用于判断浏览器类型</span><br><span class="line"></span><br><span class="line">    $(&quot;.file&quot;).change(function() &#123;</span><br><span class="line">        &#x2F;&#x2F;获取选择图片的对象</span><br><span class="line">        var docObj &#x3D; $(this)[0];</span><br><span class="line">        var picDiv &#x3D; $(this).parents(&quot;.picDiv&quot;);</span><br><span class="line">        &#x2F;&#x2F;得到所有的图片文件</span><br><span class="line">        var fileList &#x3D; docObj.files;</span><br><span class="line">        &#x2F;&#x2F;循环遍历</span><br><span class="line">        for (var i &#x3D; 0; i &lt; fileList.length; i++) &#123;</span><br><span class="line">            const rand &#x3D; Math.random().toString(36).substr(2);</span><br><span class="line">            &#x2F;&#x2F;动态添加html元素</span><br><span class="line">            var picHtml &#x3D; &quot;&lt;div class&#x3D;&#39;imageDiv&#39; &gt; &lt;img id&#x3D;&#39;img&quot; + rand + &quot;&#39; src&#x3D;&#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;assets@master&#x2F;avatar&#x2F;avatar.png&#39; &#x2F;&gt; &lt;div class&#x3D;&#39;cover&#39;&gt;&lt;i class&#x3D;&#39;delbtn&#39;&gt;删除&lt;&#x2F;i&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&quot;;</span><br><span class="line">            picDiv.prepend(picHtml);</span><br><span class="line">            &#x2F;&#x2F;获取图片imgi的对象</span><br><span class="line">            var imgObjPreview &#x3D; document.getElementById(&quot;img&quot; + rand);</span><br><span class="line">            if (fileList &amp;&amp; fileList[i]) &#123;</span><br><span class="line">                &#x2F;&#x2F;图片属性</span><br><span class="line">                imgObjPreview.style.display &#x3D; &#39;block&#39;;</span><br><span class="line">                imgObjPreview.style.width &#x3D; &#39;160px&#39;;</span><br><span class="line">                imgObjPreview.style.height &#x3D; &#39;130px&#39;;</span><br><span class="line"></span><br><span class="line">                var myFormData &#x3D; new FormData();</span><br><span class="line">                myFormData.append(&quot;file&quot;, fileList[i]);</span><br><span class="line">                hl_uploadFile(&#39;&#x2F;common&#x2F;upload&#39;,myFormData,true,function (res) &#123;</span><br><span class="line">                    console.info(res);</span><br><span class="line">                    imgObjPreview.src &#x3D; res.url;</span><br><span class="line">                    var id &#x3D; res.fileName;&#x2F;&#x2F;如果是附件表，这里应该是id,不是fileName</span><br><span class="line">                    if($(&#39;.img_ids&#39;).val()&#x3D;&#x3D;&#39;&#39;)&#123;</span><br><span class="line">                        $(&#39;.img_ids&#39;).val(id);</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        $(&#39;.img_ids&#39;).val($(&#39;.img_ids&#39;).val()+&#39;-&#39;+id);</span><br><span class="line">                    &#125;</span><br><span class="line">                    console.info($(&#39;.img_ids&#39;).val());</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;*删除功能*&#x2F;</span><br><span class="line">        $(&quot;.delbtn&quot;).click(function() &#123;</span><br><span class="line">            var _this &#x3D; $(this);</span><br><span class="line">            _this.parents(&quot;.imageDiv&quot;).remove();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>ex-upload.js文件如下内容，带回调函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    三个参数</span><br><span class="line">    file：一个是文件(类型是图片格式)，</span><br><span class="line">    w：一个是文件压缩的后宽度，宽度越小，字节越小</span><br><span class="line">    objDiv：一个是容器或者回调函数</span><br><span class="line">    photoCompress()</span><br><span class="line">     *&#x2F;</span><br><span class="line">function photoCompress(file, w, objDiv) &#123;</span><br><span class="line">    var ready &#x3D; new FileReader();</span><br><span class="line">    &#x2F;*开始读取指定的Blob对象或File对象中的内容. 当读取操作完成时,readyState属性的值会成为DONE,如果设置了onloadend事件处理程序,则调用之.同时,result属性中将包含一个data: URL格式的字符串以表示所读取文件的内容.*&#x2F;</span><br><span class="line">    ready.readAsDataURL(file);</span><br><span class="line">    ready.onload &#x3D; function () &#123;</span><br><span class="line">        var re &#x3D; this.result;</span><br><span class="line">        canvasDataURL(re, w, objDiv)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function canvasDataURL(path, obj, callback) &#123;</span><br><span class="line">    var img &#x3D; new Image();</span><br><span class="line">    img.src &#x3D; path;</span><br><span class="line">    img.onload &#x3D; function () &#123;</span><br><span class="line">        var that &#x3D; this;</span><br><span class="line">        &#x2F;&#x2F; 默认按比例压缩</span><br><span class="line">        var w &#x3D; that.width,</span><br><span class="line">            h &#x3D; that.height,</span><br><span class="line">            scale &#x3D; w &#x2F; h;</span><br><span class="line">        w &#x3D; obj.width || w;</span><br><span class="line">        h &#x3D; obj.height || (w &#x2F; scale);</span><br><span class="line">        var quality &#x3D; 0.7;  &#x2F;&#x2F; 默认图片质量为0.7</span><br><span class="line">        &#x2F;&#x2F;生成canvas</span><br><span class="line">        var canvas &#x3D; document.createElement(&#39;canvas&#39;);</span><br><span class="line">        var ctx &#x3D; canvas.getContext(&#39;2d&#39;);</span><br><span class="line">        &#x2F;&#x2F; 创建属性节点</span><br><span class="line">        var anw &#x3D; document.createAttribute(&quot;width&quot;);</span><br><span class="line">        anw.nodeValue &#x3D; w;</span><br><span class="line">        var anh &#x3D; document.createAttribute(&quot;height&quot;);</span><br><span class="line">        anh.nodeValue &#x3D; h;</span><br><span class="line">        canvas.setAttributeNode(anw);</span><br><span class="line">        canvas.setAttributeNode(anh);</span><br><span class="line">        ctx.drawImage(that, 0, 0, w, h);</span><br><span class="line">        &#x2F;&#x2F; 图像质量</span><br><span class="line">        if (obj.quality &amp;&amp; obj.quality &lt;&#x3D; 1 &amp;&amp; obj.quality &gt; 0) &#123;</span><br><span class="line">            quality &#x3D; obj.quality;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; quality值越小，所绘制出的图像越模糊</span><br><span class="line">        var base64 &#x3D; canvas.toDataURL(&#39;image&#x2F;jpeg&#39;, quality);</span><br><span class="line">        &#x2F;&#x2F; 回调函数返回base64的值</span><br><span class="line">        callback(base64);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 将以base64的图片url数据转换为Blob</span><br><span class="line"> * @param urlData</span><br><span class="line"> *            用url方式表示的base64图片数据</span><br><span class="line"> *&#x2F;</span><br><span class="line">function convertBase64UrlToBlob(urlData) &#123;</span><br><span class="line">    var arr &#x3D; urlData.split(&#39;,&#39;), mime &#x3D; arr[0].match(&#x2F;:(.*?);&#x2F;)[1],</span><br><span class="line">        bstr &#x3D; atob(arr[1]), n &#x3D; bstr.length, u8arr &#x3D; new Uint8Array(n);</span><br><span class="line">    while (n--) &#123;</span><br><span class="line">        u8arr[n] &#x3D; bstr.charCodeAt(n);</span><br><span class="line">    &#125;</span><br><span class="line">    return new Blob([u8arr], &#123;type: mime&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var xhr;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;上传文件方法</span><br><span class="line">&#x2F;&#x2F;url：上传文件地址</span><br><span class="line">&#x2F;&#x2F;formData:var myFormData &#x3D; new FormData();myFormData.append(&quot;file&quot;, fileList[i]);</span><br><span class="line">&#x2F;&#x2F;cprStatus：是否压缩</span><br><span class="line">&#x2F;&#x2F;callback：回调方法</span><br><span class="line">function hl_uploadFile(url,formData,cprStatus,callback) &#123;</span><br><span class="line">    var fileObj &#x3D; formData.get(&quot;file&quot;); &#x2F;&#x2F; js 获取文件对象</span><br><span class="line">    formData.delete(&quot;file&quot;);</span><br><span class="line">    if (fileObj.size &#x2F; 1024 &gt; 1025 * 100) &#123;&#x2F;&#x2F; 大于100M不让上传</span><br><span class="line">        alert(&quot;文件已超出系统100M接受大小！&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    var url &#x3D; url; &#x2F;&#x2F; 接收上传文件的后台地址</span><br><span class="line">    var form &#x3D; formData; &#x2F;&#x2F; FormData 对象</span><br><span class="line">    &#x2F;&#x2F;表单对象可自行添加要发送的参数例如form.append(&quot;age&quot;10) 则后台可接收到age&#x3D;10的参数</span><br><span class="line">    var index &#x3D; fileObj.name.lastIndexOf(&quot;.&quot;);</span><br><span class="line">    var suffix &#x3D; fileObj.name.substr(index + 1).toUpperCase();</span><br><span class="line">    if (cprStatus &#x3D;&#x3D; true &amp;&amp; (fileObj.size &#x2F; 1024 &gt; 1025) &amp;&amp; (suffix &#x3D;&#x3D; &quot;BMP&quot; || suffix &#x3D;&#x3D; &quot;JPG&quot; || suffix &#x3D;&#x3D; &quot;JPEG&quot; || suffix &#x3D;&#x3D; &quot;PNG&quot; || suffix &#x3D;&#x3D; &quot;GIF&quot;)) &#123; &#x2F;&#x2F;大于1M,并且是图片类，进行压缩上传</span><br><span class="line">        if (fileObj.size &#x2F; 1024 &gt; 1025 * 20) &#123;&#x2F;&#x2F; 大于20M不让上传</span><br><span class="line">            alert(&quot;图片已超出系统20M接受大小！&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        var startTime &#x3D; new Date(); &#x2F;&#x2F; 结束时间</span><br><span class="line">        console.info(&quot;文件大小为：&quot; + fileObj.size &#x2F; (1024 * 1024) + &quot;M,压缩中...&quot;);</span><br><span class="line">        photoCompress(fileObj, &#123;</span><br><span class="line">            quality: 0.2</span><br><span class="line">        &#125;, function (base64Codes) &#123;</span><br><span class="line">            var endTime &#x3D; new Date(); &#x2F;&#x2F; 结束时间</span><br><span class="line">            console.info(&quot;文件压缩后大小为：&quot; + base64Codes.length &#x2F; (1024 * 1024) + &quot;M,用时&quot; + (endTime - startTime) + &quot;毫秒,开始上传！&quot;);</span><br><span class="line">            var bl &#x3D; convertBase64UrlToBlob(base64Codes);</span><br><span class="line">            &#x2F;&#x2F;直接向FormData对象中添加File或Blob，就像下面这样：</span><br><span class="line">            form.append(&quot;file&quot;, bl, &quot;file_&quot; + Date.parse(new Date()) + &quot;.jpg&quot;); &#x2F;&#x2F; 文件对象</span><br><span class="line">            xhr &#x3D; new XMLHttpRequest();  &#x2F;&#x2F; XMLHttpRequest 对象</span><br><span class="line">            xhr.open(&quot;post&quot;, url, true); &#x2F;&#x2F;post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。</span><br><span class="line">            xhr.onload &#x3D; uploadComplete; &#x2F;&#x2F;请求完成</span><br><span class="line">            xhr.onerror &#x3D; uploadFailed; &#x2F;&#x2F;请求失败</span><br><span class="line"></span><br><span class="line">            xhr.upload.onprogress &#x3D; progressFunction;&#x2F;&#x2F;【上传进度调用方法实现】</span><br><span class="line">            xhr.upload.onloadstart &#x3D; function () &#123;&#x2F;&#x2F;上传开始执行方法</span><br><span class="line">                ot &#x3D; new Date().getTime();   &#x2F;&#x2F;设置上传开始时间</span><br><span class="line">                oloaded &#x3D; 0;&#x2F;&#x2F;设置上传开始时，以上传的文件大小为0</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            xhr.send(form); &#x2F;&#x2F;开始上传，发送form数据</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; else &#123; &#x2F;&#x2F;小于等于1M 原图上传</span><br><span class="line">        form.append(&quot;file&quot;, fileObj); &#x2F;&#x2F; 文件对象</span><br><span class="line">        xhr &#x3D; new XMLHttpRequest();  &#x2F;&#x2F; XMLHttpRequest 对象</span><br><span class="line">        xhr.open(&quot;post&quot;, url, true); &#x2F;&#x2F;post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。</span><br><span class="line">        xhr.onload &#x3D; uploadComplete; &#x2F;&#x2F;请求完成</span><br><span class="line">        xhr.onerror &#x3D; uploadFailed; &#x2F;&#x2F;请求失败</span><br><span class="line"></span><br><span class="line">        xhr.upload.onprogress &#x3D; progressFunction;&#x2F;&#x2F;【上传进度调用方法实现】</span><br><span class="line">        xhr.upload.onloadstart &#x3D; function () &#123;&#x2F;&#x2F;上传开始执行方法</span><br><span class="line">            ot &#x3D; new Date().getTime();   &#x2F;&#x2F;设置上传开始时间</span><br><span class="line">            oloaded &#x3D; 0;&#x2F;&#x2F;设置上传开始时，以上传的文件大小为0</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        xhr.send(form); &#x2F;&#x2F;开始上传，发送form数据</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;上传成功响应</span><br><span class="line">    function uploadComplete(evt) &#123;</span><br><span class="line">        &#x2F;&#x2F;服务断接收完文件返回的结果</span><br><span class="line">        &#x2F;*console.info(&#39;evt&#x3D;&#39; + JSON.stringify(evt));*&#x2F;</span><br><span class="line">        var data &#x3D; JSON.parse(evt.target.responseText);</span><br><span class="line">        &#x2F;&#x2F;根据自己服务器返回的参数进行判断，可自定success 或者data.code &#x3D; 200 以自己返回的字段为准</span><br><span class="line">        if (data.code &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            console.info(&quot;上传成功！&quot;);</span><br><span class="line">            callback(data);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            alert(&quot;上传失败！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;上传失败</span><br><span class="line">function uploadFailed(evt) &#123;</span><br><span class="line">    console.info(evt);</span><br><span class="line">    alert(&quot;上传失败！!!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;取消上传</span><br><span class="line">function cancleUploadFile() &#123;</span><br><span class="line">    xhr.abort();</span><br><span class="line">    console.info(&quot;取消方法被调用&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;上传进度实现方法，上传过程中会频繁调用该方法</span><br><span class="line">function progressFunction(evt) &#123;</span><br><span class="line">    var progressBar &#x3D; document.getElementById(&quot;progressBar&quot;);</span><br><span class="line">    var percentageDiv &#x3D; document.getElementById(&quot;percentage&quot;);</span><br><span class="line">    if (progressBar &#x3D;&#x3D; null || percentageDiv &#x3D;&#x3D; null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; event.total是需要传输的总字节，event.loaded是已经传输的字节。如果event.lengthComputable不为真，则event.total等于0</span><br><span class="line">    if (evt.lengthComputable) &#123;&#x2F;&#x2F;</span><br><span class="line">        progressBar.max &#x3D; evt.total;</span><br><span class="line">        progressBar.value &#x3D; evt.loaded;</span><br><span class="line">        percentageDiv.innerHTML &#x3D; Math.round(evt.loaded &#x2F; evt.total * 100) + &quot;%&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    var time &#x3D; document.getElementById(&quot;time&quot;);</span><br><span class="line">    var nt &#x3D; new Date().getTime();&#x2F;&#x2F;获取当前时间</span><br><span class="line">    var pertime &#x3D; (nt - ot) &#x2F; 1000; &#x2F;&#x2F;计算出上次调用该方法时到现在的时间差，单位为s</span><br><span class="line">    ot &#x3D; new Date().getTime(); &#x2F;&#x2F;重新赋值时间，用于下次计算</span><br><span class="line">    var perload &#x3D; evt.loaded - oloaded; &#x2F;&#x2F;计算该分段上传的文件大小，单位b</span><br><span class="line">    oloaded &#x3D; evt.loaded;&#x2F;&#x2F;重新赋值已上传文件大小，用以下次计算</span><br><span class="line">    &#x2F;&#x2F;上传速度计算</span><br><span class="line">    var speed &#x3D; perload &#x2F; pertime;&#x2F;&#x2F;单位b&#x2F;s</span><br><span class="line">    var bspeed &#x3D; speed;</span><br><span class="line">    var units &#x3D; &#39;b&#x2F;s&#39;;&#x2F;&#x2F;单位名称</span><br><span class="line">    if (speed &#x2F; 1024 &gt; 1) &#123;</span><br><span class="line">        speed &#x3D; speed &#x2F; 1024;</span><br><span class="line">        units &#x3D; &#39;k&#x2F;s&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (speed &#x2F; 1024 &gt; 1) &#123;</span><br><span class="line">        speed &#x3D; speed &#x2F; 1024;</span><br><span class="line">        units &#x3D; &#39;M&#x2F;s&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    speed &#x3D; speed.toFixed(1);</span><br><span class="line">    &#x2F;&#x2F;剩余时间</span><br><span class="line">    var resttime &#x3D; ((evt.total - evt.loaded) &#x2F; bspeed).toFixed(1);</span><br><span class="line">    time.innerHTML &#x3D; &#39;，速度：&#39; + speed + units + &#39;，剩余时间：&#39; + resttime + &#39;s&#39;;</span><br><span class="line">    if (bspeed &#x3D;&#x3D; 0) time.innerHTML &#x3D; &#39;上传已取消&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>代码案例</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>js</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器安装JDK和supervisor</title>
    <url>/2019/04/14/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85JDK%E5%92%8Csupervisor/</url>
    <content><![CDATA[<h5 id="查询系统自带的openjdk"><a href="#查询系统自带的openjdk" class="headerlink" title="查询系统自带的openjdk"></a>查询系统自带的openjdk</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep java | grep openjdk</span><br></pre></td></tr></table></figure>
<h5 id="如果有，使用如下命令逐个全部卸载"><a href="#如果有，使用如下命令逐个全部卸载" class="headerlink" title="如果有，使用如下命令逐个全部卸载"></a>如果有，使用如下命令逐个全部卸载</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps 系统自带的jdk名</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h5 id="检查是否卸载完成，卸载完成再进行下一步"><a href="#检查是否卸载完成，卸载完成再进行下一步" class="headerlink" title="检查是否卸载完成，卸载完成再进行下一步"></a>检查是否卸载完成，卸载完成再进行下一步</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep java | grep openjdk</span><br></pre></td></tr></table></figure>
<h5 id="安装jdk，需要事先把jdk的rpm文件放到-root下"><a href="#安装jdk，需要事先把jdk的rpm文件放到-root下" class="headerlink" title="安装jdk，需要事先把jdk的rpm文件放到/root下"></a>安装jdk，需要事先把jdk的rpm文件放到/root下</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;root</span><br><span class="line">rpm -ivh jdk-8u162-linux-x64.rpm</span><br></pre></td></tr></table></figure>
<h5 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure>
<h5 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>
<h5 id="在文件的最后增加如下内容"><a href="#在文件的最后增加如下内容" class="headerlink" title="在文件的最后增加如下内容"></a>在文件的最后增加如下内容</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_162</span><br><span class="line">JRE_HOME&#x3D;$JAVA_HOME&#x2F;jre</span><br><span class="line">PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$JRE_HOME&#x2F;bin</span><br><span class="line">CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar:$JRE_HOME&#x2F;lib</span><br><span class="line">export JAVA_HOME JRE_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure>
<h5 id="使修改生效"><a href="#使修改生效" class="headerlink" title="使修改生效"></a>使修改生效</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<h5 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y supervisor</span><br></pre></td></tr></table></figure>
<h5 id="检查状态、启动、设置开机自动启动"><a href="#检查状态、启动、设置开机自动启动" class="headerlink" title="检查状态、启动、设置开机自动启动"></a>检查状态、启动、设置开机自动启动</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl status supervisord.service</span><br><span class="line">systemctl start  supervisord.service</span><br><span class="line">systemctl enable supervisord.service</span><br><span class="line">systemctl status supervisord.service</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>答应我，别再if/else走天下了可以吗</title>
    <url>/2019/12/23/%E7%AD%94%E5%BA%94%E6%88%91%EF%BC%8C%E5%88%AB%E5%86%8Dif-else%E8%B5%B0%E5%A4%A9%E4%B8%8B%E4%BA%86%E5%8F%AF%E4%BB%A5%E5%90%97/</url>
    <content><![CDATA[<p>以下文章来源于<a href="https://mp.weixin.qq.com/s/kw3IuPQpj1XKMkxgtyZjIQ">CodeSheep</a> ，作者hansonwong99</p>
<h5 id="哎，曾几何时"><a href="#哎，曾几何时" class="headerlink" title="哎，曾几何时"></a>哎，曾几何时</h5><p>想当年，其实我也特别钟情于 if/else连环写法，上来就是一顿SAO操作，比如举个好理解的简单栗子：<br>一般来说我们正常的后台管理系统都有所谓的角色的概念，不同管理员权限不一样，能够行使的操作也不一样，比如：</p>
<a id="more"></a>


<ul>
<li>系统管理员（ ROLE_ROOT_ADMIN）：有 A操作权限</li>
<li>订单管理员（ ROLE_ORDER_ADMIN）：有 B操作权限</li>
<li>普通用户（ ROLE_NORMAL）：有 C操作权限</li>
</ul>
<p>比如一个用户进来，我们需要根据不同用户的角色来判断其有哪些行为，这时候SAO代码出现了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class JudgeRole &#123;</span><br><span class="line">    public String judge(String roleName) &#123;</span><br><span class="line">        String result &#x3D; &quot;&quot;;</span><br><span class="line">        if (roleName.equals(&quot;ROLE_ROOT_ADMIN&quot;)) &#123;</span><br><span class="line">            &#x2F;&#x2F; 系统管理员有A权限</span><br><span class="line">            result &#x3D; &quot;ROLE_ROOT_ADMIN: &quot; + &quot;has AAA permission&quot;;</span><br><span class="line">        &#125; else if (roleName.equals(&quot;ROLE_ORDER_ADMIN&quot;)) &#123;</span><br><span class="line">            &#x2F;&#x2F; 订单管理员有B权限</span><br><span class="line">            result &#x3D; &quot;ROLE_ORDER_ADMIN: &quot; + &quot;has BBB permission&quot;;</span><br><span class="line">        &#125; else if (roleName.equals(&quot;ROLE_NORMAL&quot;)) &#123;</span><br><span class="line">            &#x2F;&#x2F; 普通用户有C权限</span><br><span class="line">            result &#x3D; &quot;ROLE_NORMAL: &quot; + &quot;has CCC permission&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            result &#x3D; &quot;XXX&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样当系统里有几十个角色时，那几十个 if/else嵌套可以说是非常酸爽了…… 这样一来非常不优雅，别人阅读起来很费劲；二来则是以后如果再复杂一点，或者想要再加条件的话不好扩展；而且代码一改，以前的老功能肯定还得重测，岂不疯了……所以，如果在不看下文的情况下，你一般会如何去对付这些令人头痛的if/else语句呢？当然有人会说用 switch/case来写是否会优雅一些呢？答案是：毛区别都没有！</p>
<p>接下来简单讲几种改进方式，别再 if/else走天下了</p>
<h5 id="有枚举为啥不用"><a href="#有枚举为啥不用" class="headerlink" title="有枚举为啥不用"></a>有枚举为啥不用</h5><p>什么角色能干什么事，这很明显有一个对应关系，所以学过的枚举为啥不用呢？<br>首先定义一个公用接口 RoleOperation，表示不同角色所能做的操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface RoleOperation &#123;</span><br><span class="line">    String op(); &#x2F;&#x2F; 表示某个角色可以做哪些op操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来我们将不同角色的情况全部交由枚举类来做，定义一个不同角色有不同权限的枚举类 RoleEnum：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public enum oleEnum implements RoleOperation &#123;</span><br><span class="line">    &#x2F;&#x2F; 系统管理员(有A操作权限)</span><br><span class="line">    ROLE_ROOT_ADMIN&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public String op () &#123;</span><br><span class="line">            return &quot;ROLE_ROOT_ADMIN:&quot; + &quot; has AAA permission&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 订单管理员(有B操作权限)</span><br><span class="line">    ROLE_ORDER_ADMIN&#123;</span><br><span class="line">         @Override</span><br><span class="line">         public String op () &#123;</span><br><span class="line">            return &quot;ROLE_ORDER_ADMIN:&quot;  + &quot; has BBB permission&quot; ;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">    &#x2F;&#x2F; 普通用户(有C操作权限)</span><br><span class="line">    ROLE_NORMAL &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public String op  () &#123;</span><br><span class="line">            return &quot;ROLE_NORMAL:&quot; + &quot; has CCC permission&quot; ;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来调用就变得异常简单了，一行代码就行了， if/else也灰飞烟灭了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class JudgeRole &#123;</span><br><span class="line">    public String judge(String roleName) &#123;</span><br><span class="line">        &#x2F;&#x2F; 一行代码搞定！之前的if&#x2F;else没了！</span><br><span class="line">        return RoleEnum.valueOf(roleName).op();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而且这样一来，以后假如我想扩充条件，只需要去枚举类中加代码即可，而不是去改以前的代码，这岂不很稳！<br>除了用枚举来消除 if/else，工厂模式也可以实现</p>
<h5 id="有工厂模式为啥不用"><a href="#有工厂模式为啥不用" class="headerlink" title="有工厂模式为啥不用"></a>有工厂模式为啥不用</h5><p>不同分支做不同的事情，很明显就提供了使用工厂模式的契机，我们只需要将不同情况单独定义好，然后去工厂类里面聚合即可。</p>
<p>首先，针对不同的角色，单独定义其业务类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 系统管理员(有A操作权限)</span><br><span class="line">public class RootAdminRole implements RoleOperation &#123;</span><br><span class="line">    private String roleName;</span><br><span class="line"></span><br><span class="line">    public RootAdminRole(String roleName) &#123;</span><br><span class="line">        this.roleName &#x3D; roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String op() &#123;</span><br><span class="line">        return roleName + &quot; has AAA permission&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 订单管理员(有B操作权限)</span><br><span class="line">public class OrderAdminRole implements RoleOperation &#123;</span><br><span class="line">    private String roleName;</span><br><span class="line"></span><br><span class="line">    public OrderAdminRole(String roleName) &#123;</span><br><span class="line">        this.roleName &#x3D; roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String op() &#123;</span><br><span class="line">        return roleName + &quot; has BBB permission&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 普通用户(有C操作权限)</span><br><span class="line">public class NormalRole implements RoleOperation &#123;</span><br><span class="line">    private String roleName;</span><br><span class="line"></span><br><span class="line">    public NormalRole(String roleName) &#123;</span><br><span class="line">        this.roleName &#x3D; roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String op() &#123;</span><br><span class="line">        return roleName + &quot; has CCC permission&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来再写一个工厂类 RoleFactory对上面不同角色进行聚合：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class RoleFactory &#123;</span><br><span class="line"></span><br><span class="line">    static Map&lt;String,RoleOperation&gt; roleOperationMap &#x3D; new HashMap  &lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 在静态块中先把初始化工作全部做完</span><br><span class="line">    static &#123;</span><br><span class="line">        roleOperationMap.put(&quot;ROLE_ROOT_ADMIN&quot;, new RootAdminRole(&quot;ROLE_ROOT_ADMIN&quot;));</span><br><span class="line">        roleOperationMap.put(&quot;ROLE_ORDER_ADMIN&quot;,new OrderAdminRole(&quot;ROLE_ORDER_ADMIN&quot;));</span><br><span class="line">        roleOperationMap.put(&quot;ROLE_NORMAL&quot;, new NormalRole(&quot;ROLE_NORMAL&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static RoleOperation getOp(String roleName) &#123;</span><br><span class="line">        return roleOperationMap.get(roleName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来借助上面这个工厂，业务代码调用也只需一行代码， if/else同样被消除了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class JudgeRole &#123;</span><br><span class="line">    public String judge(String roleName) &#123;</span><br><span class="line">        &#x2F;&#x2F; 一行代码搞定！之前的 if&#x2F;else也没了！</span><br><span class="line">        return RoleFactory.getOp(roleName).op();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的话以后想扩展条件也很容易，只需要增加新代码，而不需要动以前的业务代码，非常符合“开闭原则”。<br>来，我们接着来，除了工厂模式，策略模式也不妨试一试</p>
<h5 id="有策略模式为啥不用"><a href="#有策略模式为啥不用" class="headerlink" title="有策略模式为啥不用"></a>有策略模式为啥不用</h5><p>策略模式和工厂模式写起来其实区别也不大！</p>
<p>在上面工厂模式代码的基础上，按照策略模式的指导思想，我们也来创建一个所谓的策略上下文类，这里命名为 RoleContext：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class RoleContext &#123;</span><br><span class="line">    &#x2F;&#x2F; 可更换的策略，传入不同的策略对象，业务即相应变化</span><br><span class="line">    private RoleOperation operation;</span><br><span class="line"></span><br><span class="line">    public RoleContext(RoleOperation operation) &#123;</span><br><span class="line">        this.operation &#x3D; operation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String execute() &#123;</span><br><span class="line">        return operation.op();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很明显上面传入的参数 operation就是表示不同的“策略”。我们在业务代码里传入不同的角色，即可得到不同的操作结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class JudgeRole &#123;</span><br><span class="line">    public String judge(RoleOperation roleOperation) &#123;</span><br><span class="line">        RoleContext roleContext &#x3D; new RoleContext(roleOperation);</span><br><span class="line"></span><br><span class="line">        return roleContext.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">    JudgeRole judgeRole&#x3D;new JudgeRole();</span><br><span class="line">    String result1&#x3D;judgeRole.judge(new RootAdminRole(&quot;ROLE_ROOT_ADMIN&quot;));</span><br><span class="line">    System.out.println(result1);</span><br><span class="line">    String result2&#x3D;judgeRole.judge(new OrderAdminRole(&quot;ROLE_ORDER_ADMIN&quot;));</span><br><span class="line">    System.out.println(result2);</span><br><span class="line">    String result3&#x3D;judgeRole.judge(new NormalRole(&quot;ROLE_NORMAL&quot;));</span><br><span class="line">    System.out.println(result3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="共-勉"><a href="#共-勉" class="headerlink" title="共   勉"></a>共   勉</h5><p>好了，先讲到这里吧，本文仅仅是抛砖引玉，使用了一个极其简单的示例来打了个样，然而其思想可以广泛地应用于实际复杂的业务和场景，思想真的很重要！写代码前还是得多思考一番，考虑是否有更具可扩展性的写法！</p>
]]></content>
      <categories>
        <category>开发总结</category>
      </categories>
      <tags>
        <tag>积累</tag>
      </tags>
  </entry>
  <entry>
    <title>用Java对象构建Json语法树</title>
    <url>/2021/01/25/%E7%94%A8Java%E5%AF%B9%E8%B1%A1%E6%9E%84%E5%BB%BAJson%E8%AF%AD%E6%B3%95%E6%A0%91/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author hailou</span><br><span class="line"> * @Description</span><br><span class="line"> * @Date on 2020&#x2F;9&#x2F;18 16:30</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.LinkedList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Json implements Comparable&lt;Json&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; There are value types</span><br><span class="line">    private int Type_String &#x3D; 1;</span><br><span class="line">    private int Type_Array &#x3D; 2;</span><br><span class="line">    private int Type_List &#x3D; 3;</span><br><span class="line">    &#x2F;&#x2F; Key always is String</span><br><span class="line">    private String key;</span><br><span class="line">    &#x2F;&#x2F; There are three types of value</span><br><span class="line">    private int valueType;</span><br><span class="line">    private String valueString;</span><br><span class="line">    private List&lt;Json&gt; valueArray;&#x2F;&#x2F; 本质一致，表现不同</span><br><span class="line">    private List&lt;Json&gt; valueList;</span><br><span class="line">    &#x2F;&#x2F; indent depth</span><br><span class="line">    private int depth;</span><br><span class="line"></span><br><span class="line">    public Json(String key, String value) &#123;</span><br><span class="line">        this.key &#x3D; key;</span><br><span class="line">        this.valueType &#x3D; Type_String;</span><br><span class="line">        this.valueString &#x3D; value;</span><br><span class="line">        this.depth &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">    public Json(String key, int type) &#123;</span><br><span class="line">        this.key &#x3D; key;</span><br><span class="line"></span><br><span class="line">        if (type &#x3D;&#x3D; Type_List) &#123;</span><br><span class="line">            this.valueType &#x3D; Type_List;</span><br><span class="line">            this.valueList &#x3D; new LinkedList&lt;Json&gt;();</span><br><span class="line">        &#125; else if (type &#x3D;&#x3D; Type_Array) &#123;</span><br><span class="line">            this.valueType &#x3D; Type_Array;</span><br><span class="line">            this.valueArray &#x3D; new LinkedList&lt;Json&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addJsonToList(Json json) &#123;</span><br><span class="line">        if (valueList !&#x3D; null) &#123;</span><br><span class="line">            valueList.add(json);</span><br><span class="line"></span><br><span class="line">            adjustDepth();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addJsonToArray(Json json) &#123;</span><br><span class="line">        if (valueArray !&#x3D; null) &#123;</span><br><span class="line">            valueArray.add(json);</span><br><span class="line"></span><br><span class="line">            adjustDepth();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void adjustDepth() &#123;</span><br><span class="line">        if (valueType &#x3D;&#x3D; Type_List) &#123;</span><br><span class="line">            for (Json json : valueList) &#123;</span><br><span class="line">                json.depth &#x3D; this.depth + 1;</span><br><span class="line">                json.adjustDepth();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (valueType &#x3D;&#x3D; Type_Array) &#123;</span><br><span class="line">            for (Json json : valueArray) &#123;</span><br><span class="line">                json.depth &#x3D; this.depth + 1;</span><br><span class="line">                json.adjustDepth();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line">        &#x2F;&#x2F; key</span><br><span class="line">        String tabs &#x3D; getIndentSpace();</span><br><span class="line">        sb.append(tabs);</span><br><span class="line">        &#x2F;&#x2F;sb.append(&quot;\&quot;&quot;+(key&#x3D;&#x3D;null?&quot;&quot;:key)+&quot;\&quot;&quot;);</span><br><span class="line">        if (key !&#x3D; null) &#123;</span><br><span class="line">            sb.append(&quot;\&quot;&quot; + key + &quot;\&quot;&quot;);</span><br><span class="line">            sb.append(&quot;:&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; value</span><br><span class="line">        if (valueType &#x3D;&#x3D; Type_String) &#123;</span><br><span class="line">            sb.append(&quot;\&quot;&quot; + valueString + &quot;\&quot;&quot;);</span><br><span class="line">        &#125; else if (valueType &#x3D;&#x3D; Type_Array) &#123;</span><br><span class="line">            sb.append(&quot;[\n&quot;);</span><br><span class="line">            int n &#x3D; valueArray.size();</span><br><span class="line">            for (int i &#x3D; 0; i &lt; n; i++) &#123;</span><br><span class="line">                Json json &#x3D; valueArray.get(i);</span><br><span class="line">                if (i !&#x3D; n - 1) &#123;</span><br><span class="line">                    sb.append(json.toString() + &quot;,\n&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    sb.append(json.toString() + &quot;\n&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(tabs + &quot;]&quot;);</span><br><span class="line">        &#125; else if (valueType &#x3D;&#x3D; Type_List) &#123;</span><br><span class="line"></span><br><span class="line">            sb.append(&quot;&#123;\n&quot;);</span><br><span class="line">            Collections.sort(valueList);</span><br><span class="line">            int n &#x3D; valueList.size();</span><br><span class="line"></span><br><span class="line">            for (int i &#x3D; 0; i &lt; n; i++) &#123;</span><br><span class="line">                Json json &#x3D; valueList.get(i);</span><br><span class="line">                if (i !&#x3D; n - 1) &#123;</span><br><span class="line">                    sb.append(json.toString() + &quot;,\n&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    sb.append(json.toString() + &quot;\n&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(tabs + &quot;&#125;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int compareTo(Json other) &#123;</span><br><span class="line">        return this.key.compareTo(other.key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String getIndentSpace() &#123;</span><br><span class="line">        return String.join(&quot;&quot;, Collections.nCopies(this.depth, &quot;    &quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Json id1 &#x3D; new Json(&quot;id&quot;, &quot;001&quot;);</span><br><span class="line">        Json name1 &#x3D; new Json(&quot;name&quot;, &quot;白菜&quot;);</span><br><span class="line"></span><br><span class="line">        Json title &#x3D; new Json(&quot;title&quot;, 3);</span><br><span class="line">        title.addJsonToList(id1);</span><br><span class="line">        title.addJsonToList(name1);</span><br><span class="line"></span><br><span class="line">        Json empty1 &#x3D; new Json(null, 3);</span><br><span class="line">        empty1.addJsonToList(new Json(&quot;id&quot;, &quot;001&quot;));</span><br><span class="line">        empty1.addJsonToList(new Json(&quot;id&quot;, &quot;你好白菜&quot;));</span><br><span class="line"></span><br><span class="line">        Json empty2 &#x3D; new Json(null, 3);</span><br><span class="line">        empty2.addJsonToList(new Json(&quot;id&quot;, &quot;001&quot;));</span><br><span class="line">        empty2.addJsonToList(new Json(&quot;id&quot;, &quot;你好萝卜&quot;));</span><br><span class="line"></span><br><span class="line">        Json content &#x3D; new Json(&quot;content&quot;, 2);</span><br><span class="line">        content.addJsonToArray(empty1);</span><br><span class="line">        content.addJsonToArray(empty2);</span><br><span class="line"></span><br><span class="line">        Json data &#x3D; new Json(&quot;data&quot;, 3);</span><br><span class="line">        data.addJsonToList(title);</span><br><span class="line">        data.addJsonToList(content);</span><br><span class="line"></span><br><span class="line">        Json status &#x3D; new Json(&quot;status&quot;, &quot;0000&quot;);</span><br><span class="line">        Json message &#x3D; new Json(&quot;message&quot;, &quot;success&quot;);</span><br><span class="line"></span><br><span class="line">        Json root &#x3D; new Json(null, 3);</span><br><span class="line">        root.addJsonToList(status);</span><br><span class="line">        root.addJsonToList(message);</span><br><span class="line">        root.addJsonToList(data);</span><br><span class="line"></span><br><span class="line">        System.out.println(root.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>递归处理JSON</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>解决nginx做反向代理后，端口丢失问题</title>
    <url>/2020/07/30/%E8%A7%A3%E5%86%B3nginx%E5%81%9A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%90%8E%EF%BC%8C%E7%AB%AF%E5%8F%A3%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在部署微服务项目中，发现nginx做反向代理后，端口丢失，以为项目代码出错，最后发现是nginx配置的问题</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream uaa_server &#123;</span><br><span class="line">   server 10.108.0.101:8000;</span><br><span class="line">   server 10.108.0.102:8000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8000;</span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    charset utf-8;</span><br><span class="line">    </span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_read_timeout 90;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;uaa_server;</span><br><span class="line">        proxy_set_header X-Forwarded-Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $host:$server_port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境部署</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
</search>
